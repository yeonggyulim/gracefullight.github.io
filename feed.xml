<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Gracefullight</title>
    <link>https://gracefullight.dev/</link>
    
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>풀스택 개발자를 꿈꾸며</description>
    <pubDate>Sun, 15 Mar 2020 14:22:42 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>One true layout 만들기</title>
      <link>https://gracefullight.dev/2020/03/15/One-true-layout/</link>
      <guid>https://gracefullight.dev/2020/03/15/One-true-layout/</guid>
      <pubDate>Sun, 15 Mar 2020 13:54:18 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;one-true-layout&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#one-true-layout&quot;&gt;&lt;/a&gt; One true layout&lt;/h1&gt;&lt;p&gt;Header, Navigation, Aside, Section
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="one-true-layout"><a class="markdownIt-Anchor" href="#one-true-layout"></a> One true layout</h1><p>Header, Navigation, Aside, Section, Footer 로 이루어진 레이아웃을 만들 시에<br><code>float</code> 을 사용해서 구성할 경우 틀어짐을 잡는 방법에 대한 내용이다.</p><p><a href="http://www.positioniseverything.net/articles/onetruelayout/equalheight" target="_blank" rel="external nofollow noopener noreferrer">원문</a>으로 보이는 링크에서는 <strong>진정한 하나의 레이아웃</strong>을 찾는 과정 중 하나이며 <strong>Eqaul Height Columns - revisited</strong>로 소개되고 있다.</p><h2 id="이슈"><a class="markdownIt-Anchor" href="#이슈"></a> 이슈</h2><p>아래와 같은 레이아웃에는 <code>footer</code> 영역이 섹션에 붙어 올라온다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">body</span> &#123; <span class="attribute">width</span>: <span class="number">1000px</span>; <span class="attribute">margin</span>: <span class="number">0</span> auto; &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#aside</span> &#123; <span class="attribute">float</span>: left; <span class="attribute">width</span>: <span class="number">200px</span>; &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#section</span> &#123; <span class="attribute">float</span>: left; <span class="attribute">width</span>: <span class="number">800px</span>; &#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span>nav<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"aside"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi sed sollicitudin mauris.</span><br><span class="line">      Aliquam faucibus facilisis vulputate. Curabitur condimentum placerat mattis.</span><br><span class="line">      Duis at metus at tellus volutpat ultrices. Cras lorem eros, cursus et risus sit amet, gravida feugiat libero.</span><br><span class="line">      Nullam id faucibus ipsum. Nulla a leo sed eros mattis bibendum. Nullam et sapien in orci tempus elementum eu sed augue.</span><br><span class="line">      Pellentesque eu vestibulum arcu. Pellentesque vel finibus libero. Nulla facilisi.</span><br><span class="line">      Quisque dolor enim, ornare eget elit ac, pharetra porta ex. Vivamus eleifend eu arcu nec consequat.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nam pulvinar dictum nibh id ullamcorper. Suspendisse justo eros, tempor vel faucibus in, pellentesque congue enim.</span><br><span class="line">      Proin non eleifend turpis, vel commodo purus. Fusce vitae nisl dapibus, tincidunt elit at, cursus lacus.</span><br><span class="line">      Maecenas varius imperdiet sollicitudin. Nunc pharetra fringilla enim ut facilisis.</span><br><span class="line">      Curabitur maximus nibh non rhoncus semper. Duis porta, purus ut tincidunt convallis, sem purus pharetra erat, eu vestibulum tellus mi id eros.</span><br><span class="line">      Fusce congue, erat at blandit mollis, tellus ex semper velit, dapibus commodo ante turpis a neque.</span><br><span class="line">      Fusce vel ex id sem auctor accumsan. Maecenas finibus nunc sem, ut gravida felis efficitur at.</span><br><span class="line">      Pellentesque lobortis dui non ligula condimentum, at auctor dui blandit.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="해결방안"><a class="markdownIt-Anchor" href="#해결방안"></a> 해결방안</h2><h3 id="overflow-hidden"><a class="markdownIt-Anchor" href="#overflow-hidden"></a> overflow: hidden</h3><p>래퍼에 이 속성을 넣는 것으로 해결 된다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">width</span>: <span class="number">1000px</span>; <span class="attribute">margin</span>: <span class="number">0</span> auto; &#125;</span><br><span class="line"><span class="selector-id">#aside</span> &#123; <span class="attribute">float</span>: left; <span class="attribute">width</span>: <span class="number">200px</span>; &#125;</span><br><span class="line"><span class="selector-id">#section</span> &#123; <span class="attribute">float</span>: left; <span class="attribute">width</span>: <span class="number">800px</span>; &#125;</span><br><span class="line"><span class="selector-id">#wrap</span> &#123; <span class="attribute">overflow</span>: hidden; &#125;</span><br></pre></td></tr></table></figure><h3 id="clear-both"><a class="markdownIt-Anchor" href="#clear-both"></a> clear: both</h3><p>또는 래퍼를 삭제하고 구획을 나누는 부분에 <code>sibling</code> 노드로 <code>clear: both</code> 속성을 주면 된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">body</span> &#123; <span class="attribute">width</span>: <span class="number">1000px</span>; <span class="attribute">margin</span>: <span class="number">0</span> auto; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.clear</span> &#123; <span class="attribute">clear</span>: both; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-id">#aside</span> &#123; <span class="attribute">float</span>: left; <span class="attribute">width</span>: <span class="number">200px</span>; &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#section</span> &#123; <span class="attribute">float</span>: left; <span class="attribute">width</span>: <span class="number">800px</span>; &#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span>nav<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"aside"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi sed sollicitudin mauris.</span><br><span class="line">      Aliquam faucibus facilisis vulputate. Curabitur condimentum placerat mattis.</span><br><span class="line">      Duis at metus at tellus volutpat ultrices. Cras lorem eros, cursus et risus sit amet, gravida feugiat libero.</span><br><span class="line">      Nullam id faucibus ipsum. Nulla a leo sed eros mattis bibendum. Nullam et sapien in orci tempus elementum eu sed augue.</span><br><span class="line">      Pellentesque eu vestibulum arcu. Pellentesque vel finibus libero. Nulla facilisi.</span><br><span class="line">      Quisque dolor enim, ornare eget elit ac, pharetra porta ex. Vivamus eleifend eu arcu nec consequat.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      Nam pulvinar dictum nibh id ullamcorper. Suspendisse justo eros, tempor vel faucibus in, pellentesque congue enim.</span><br><span class="line">      Proin non eleifend turpis, vel commodo purus. Fusce vitae nisl dapibus, tincidunt elit at, cursus lacus.</span><br><span class="line">      Maecenas varius imperdiet sollicitudin. Nunc pharetra fringilla enim ut facilisis.</span><br><span class="line">      Curabitur maximus nibh non rhoncus semper. Duis porta, purus ut tincidunt convallis, sem purus pharetra erat, eu vestibulum tellus mi id eros.</span><br><span class="line">      Fusce congue, erat at blandit mollis, tellus ex semper velit, dapibus commodo ante turpis a neque.</span><br><span class="line">      Fusce vel ex id sem auctor accumsan. Maecenas finibus nunc sem, ut gravida felis efficitur at.</span><br><span class="line">      Pellentesque lobortis dui non ligula condimentum, at auctor dui blandit.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- clear:both 노드 추가 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2020/03/15/One-true-layout/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CSS3 레이아웃</title>
      <link>https://gracefullight.dev/2020/03/01/css3-layout/</link>
      <guid>https://gracefullight.dev/2020/03/01/css3-layout/</guid>
      <pubDate>Sun, 01 Mar 2020 05:52:04 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;css3&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#css3&quot;&gt;&lt;/a&gt; CSS3&lt;/h1&gt;&lt;p&gt;사용할 수 없는 브라우저에서 신규 문법은 무시된다.&lt;/p&gt;&lt;h2 id=&quot;bfc&quot;&gt;&lt;a class=&quot;markdownIt-A
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="css3"><a class="markdownIt-Anchor" href="#css3"></a> CSS3</h1><p>사용할 수 없는 브라우저에서 신규 문법은 무시된다.</p><h2 id="bfc"><a class="markdownIt-Anchor" href="#bfc"></a> BFC</h2><p><strong>Block Formatting Context</strong>이며 아래 조건에서 생성된다.</p><ul><li>루트 요소</li><li><code>float: right, left</code></li><li><code>position: absolute</code></li><li><code>display: inline-block</code></li><li><code>overflow</code> 값이 <code>visable</code> 외에 다른 값일 때</li><li>flex item</li><li>grid item</li><li>table cell</li></ul><h1 id="layout"><a class="markdownIt-Anchor" href="#layout"></a> layout</h1><h2 id="float"><a class="markdownIt-Anchor" href="#float"></a> float</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123; <span class="attribute">float</span>: left; &#125;</span></span><br><span class="line"><span class="css">  <span class="comment">/* 다음 세 가지 방법으로 container 안에 box 를 넣어줄 수 있다. */</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123; <span class="attribute">overflow</span>: hidden; &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123; <span class="attribute">float</span>: left; &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123; <span class="attribute">display</span>: flow-root; &#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>플로팅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>overflow: hidden</code> 으로 플로팅 요소를 잡는 것은 <code>box-shadow</code>가 잘리는 등의 문제가 있다.</li><li><code>display: flow-root</code>는 모던 브라우저에서만 지원한다.</li></ul><h2 id="position"><a class="markdownIt-Anchor" href="#position"></a> position</h2><ul><li><code>static</code>: 기본 값이다. 코드상 노출된 순서대로 표시된다.</li><li><code>relative</code>: 오프셋(top, left…)와 함께 사용된다.<ul><li>새로운 <em>컨테이너 블록</em>이 되며 하위 <code>absolute</code> 를 가둘 수 있다 .</li></ul></li><li><code>absolute</code>: 흐름에서 벗어나며 자신이 포함된 <em>컨테이너 블록</em>의 가장자리를 기준으로 오프셋만큼 이동한다.<ul><li>별도의 <em>컨테이너 블록</em>이 선언되지 않았을 경우, viewport가 된다.</li></ul></li><li><code>fixed</code>: viewport를 기준으로 고정된다. 스크롤해도 변하지 않는다.</li><li><code>sticky</code>: static + fixed 로 문서와 함께 스크롤 되다가 설정한 위치가 되면 고정된다.<ul><li>모던 브라우저에서만 지원한다.</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123; <span class="attribute">width</span>: <span class="number">400px</span>; <span class="attribute">height</span>: <span class="number">400px</span>; &#125;</span></span><br><span class="line"><span class="css">  <span class="comment">/* 이 박스는 맨 위(viewport)에서 10 10 씩 떨어져있다. */</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123; <span class="attribute">position</span>: absolute; <span class="attribute">top</span>: <span class="number">10px</span>; <span class="attribute">right</span>: <span class="number">100px</span>; <span class="attribute">width</span>: <span class="number">200px</span>; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="comment">/* 컨테이너 블록으로 만들면 박스가 들어온다. */</span></span></span><br><span class="line"><span class="css">  <span class="comment">/* .container &#123; position: relative; width: 400px; height: 400px; &#125; */</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>absolute<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="multi-column"><a class="markdownIt-Anchor" href="#multi-column"></a> multi-column</h2><p><code>column-count</code>, <code>column-width</code>로 단 효과를 낼 수 있다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.columes</span> &#123;</span></span><br><span class="line">    column-width: 200px;</span><br><span class="line">    column-count: 2;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"columns"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>첫 번째 단<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>두 번째 단<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="axis"><a class="markdownIt-Anchor" href="#axis"></a> axis</h2><ul><li><strong>주축</strong>과 <strong>교차축</strong>이 있다.<ul><li>기본은 <code>flex-direction: row</code>이며 교차축은 수직이다.</li><li><code>flex-direction: column</code>이면 교차축은 수평이다.</li></ul></li><li>아이템의 배치는 항상 <code>교차축(cross axis)</code>에서 이뤄진다.</li><li><code>교차축 === 블럭축(block axis)</code> 이다.</li><li>그리드에서는 <code>컬럼 축(column axis)</code>이라고도 한다.</li></ul><h2 id="flexbox"><a class="markdownIt-Anchor" href="#flexbox"></a> flexbox</h2><blockquote><p>1차원 레이아웃</p></blockquote><ul><li><code>display: flex</code> 설정시 자식은 flex item이 된다.</li><li>flex item은 <code>min-content</code>로 설정한 너비보다 작아질 수 없으므로 컨테이너를 벗어난다.<ul><li><code>min-content</code>는 아이템 내부 단어 중 가장 긴 것을 기준으로 설정된다.</li></ul></li><li><code>flex-wrap: wrap;</code> 속성 설정 시 여러 줄에 걸쳐 표현된다.</li><li>줄이 넘어가면 넘어간 줄이 <em>flex container</em> 가 된다.</li></ul><h3 id="플렉스-아이템-배치"><a class="markdownIt-Anchor" href="#플렉스-아이템-배치"></a> 플렉스 아이템 배치</h3><ul><li><code>align-items</code><ul><li><code>stretch</code>: 기본값으로 늘어난다.</li><li><code>flex-start</code>: 요소가 컨테이너 상단에 붙는다.</li><li><code>flex-end</code>: 바닥에 붙는다.</li><li><code>center</code>: 중앙에 배치된다.</li></ul></li><li><code>align-self</code>: flex item 에서 위 속성을 덮는다.</li></ul><h3 id="플렉스-아이템-정렬"><a class="markdownIt-Anchor" href="#플렉스-아이템-정렬"></a> 플렉스 아이템 정렬</h3><ul><li><code>justify-content</code><ul><li><code>flex-direction: row</code>면 가로줄, <code>column</code>이면 세로줄에서 동작한다.</li><li><code>flex-start</code>: 기본값</li><li><code>flex-end</code>: 플렉스 컨테이너 끝에서부터 추가된다.</li><li><code>space-between</code>: 아이템 사이의 공간을 똑같은 간격으로 설정한다.</li><li><code>space-around</code> 모든 아이템 양쪽에 똑같은 간격의 <em>마진</em>을 설정한다.</li><li><code>space-evenly</code> 모든 공백을 똑같이 설정한다.<ul><li>아이템-아이템 간 컨테이너-아이템 간의 간격이 똑같다.</li></ul></li><li><code>center</code>: 가운데 설정한다.</li></ul></li><li><code>align-content</code><ul><li><strong>교차축 위에서 동작</strong>한다.</li><li><code>flex-wrap: wrap</code>이고 아이템 배치 공간보다 컨테이너가 길 때 사용할 수 있다.</li><li>초기값은 start이다.</li><li>나머지 동작은 justify-content와 같다.</li></ul></li><li><code>margin-left: auto;</code> 를 사용하면 원하는 아이템을 반대방향에 배치할 수 있다.</li></ul><h3 id="반응형-플렉스박스"><a class="markdownIt-Anchor" href="#반응형-플렉스박스"></a> 반응형 플렉스박스</h3><ul><li><code>flex-grow</code>: flex-basis에 설정한 값보다 커질 수 있는지 설정한다.</li><li><code>flex-shrink</code>: flex-basis에 설정한 값보다 작아질 수 있는지 설정한다.<ul><li>500px 컨테이너에 200px 플렉스 아이템이 3개 있다면 활성화시 영역 안에 들어올 것이다.</li></ul></li><li><code>flex-basis</code>: flex-direction 에 따라 너비나 높이의 기본값을 지정한다.<ul><li><code>flex-basis: content</code>: 주축의 컨텐츠 크기로 설정된다.</li><li><code>flex-basis: auto</code>: 플렉스 아이템에 <code>width</code> 속성이 있다면 그 값을 flex-basis 로 사용한다. 특별한 경우가 아니라면 auto가 권장된다.</li></ul></li><li>보통 세 속성을 합쳐서 <code>flex: 0 0 200px;</code> 처럼 적는다.</li></ul><h3 id="플렉스박스-방향"><a class="markdownIt-Anchor" href="#플렉스박스-방향"></a> 플렉스박스 방향</h3><blockquote><p>플렉스박스와 그리드는 <code>dir=ltr</code> <code>dir=rtl</code> 속성에 좌,우 영향을 받는다.</p></blockquote><ul><li><code>flex-direction: row-reverse</code></li><li><code>flex-direction: column-reverse</code></li></ul><h2 id="grid"><a class="markdownIt-Anchor" href="#grid"></a> grid</h2><blockquote><p>2차원 레이아웃</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: 1fr 1fr 1fr;</span><br><span class="line"><span class="css">    <span class="comment">/* grid-column-gap, grid-row-gap 축약 */</span></span></span><br><span class="line">    grid-gap: 20px;</span><br><span class="line"><span class="css">    <span class="comment">/* 가장 최근 명세에서는 `grid-` prefix 가 빠졌다 */</span></span></span><br><span class="line">    gap: 20px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>grid 1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>grid 2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>grid 3<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>grid 4<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>grid 5<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>grid 6<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="fr"><a class="markdownIt-Anchor" href="#fr"></a> fr</h3><ul><li><em>fraction</em></li><li>유연한 너비를 나타내는 단위이다.</li></ul><h3 id="그리드-트랙"><a class="markdownIt-Anchor" href="#그리드-트랙"></a> 그리드 트랙</h3><ul><li>그리드의 열과 행을 나타낸다.</li></ul><h3 id="그리드-배치"><a class="markdownIt-Anchor" href="#그리드-배치"></a> 그리드 배치</h3><blockquote><p>프로그래머의 수는 0부터 시작이지만 그리드 배치에서는 1부터여야한다.</p></blockquote><ul><li>LTR 의 경우는 왼쪽 끝이 1 이다.</li><li>RTL 의 경우는 오른쪽 끝이 1 이다.</li><li>반대편 끝은 -1 이다.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item1</span> &#123; <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>; <span class="attribute">grid-row</span>: <span class="number">1</span>; &#125;</span><br><span class="line"><span class="selector-class">.item2</span> &#123; <span class="attribute">grid-column</span>: <span class="number">3</span>; <span class="attribute">grid-row</span>: <span class="number">1</span>; &#125;</span><br><span class="line"><span class="selector-class">.item3</span> &#123; <span class="attribute">grid-column</span>: <span class="number">1</span>; <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">4</span>; &#125;</span><br><span class="line"><span class="selector-class">.item4</span> &#123; <span class="attribute">grid-column</span>: <span class="number">2</span> / <span class="number">4</span>; <span class="attribute">grid-row</span>: <span class="number">2</span>; &#125;</span><br><span class="line"><span class="selector-class">.item5</span> &#123; <span class="attribute">grid-column</span>: <span class="number">2</span> / <span class="number">4</span>; <span class="attribute">grid-row</span>: <span class="number">3</span>; &#125;</span><br></pre></td></tr></table></figure><p><code>grid-column: auto / span 2;</code> 처럼 시작 위치를 auto로 잡고 끝 위치를 span 2로 잡으면 자동 배치 기능에 의해 그리드 아이템 위치는 자동으로 정해지고 너비는 항상 컬럼 두 개만큼 확장한다.</p><h3 id="그리드-정렬"><a class="markdownIt-Anchor" href="#그리드-정렬"></a> 그리드 정렬</h3><ul><li><code>justify-items</code>로 설정하며 각 영역 안에서 정렬된다.</li><li>초기값은 <code>stretch</code>이다.</li></ul><h3 id="named-area"><a class="markdownIt-Anchor" href="#named-area"></a> named area</h3><ul><li>그리드에 이름을 직접 지정할 수도 있다.</li><li><code>.</code>은 공백을 나타낸다.</li><li>영역은 반드시 사각형이여야한다.</li><li><code>align-items</code>, <code>justify-items</code> 속성 변경시 반복이 무시된다. (stretch가 아니므로)</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"a a b"</span></span><br><span class="line">    <span class="string">". d d"</span></span><br><span class="line">    <span class="string">"c e e"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item1</span> &#123; <span class="attribute">grid-area</span>: a; &#125;</span><br><span class="line"><span class="selector-class">.item2</span> &#123; <span class="attribute">grid-area</span>: b; &#125;</span><br><span class="line"><span class="selector-class">.item3</span> &#123; <span class="attribute">grid-area</span>: c; &#125;</span><br><span class="line"><span class="selector-class">.item4</span> &#123; <span class="attribute">grid-area</span>: d; &#125;</span><br><span class="line"><span class="selector-class">.item5</span> &#123; <span class="attribute">grid-area</span>: e; &#125;</span><br></pre></td></tr></table></figure><h3 id="반응형-그리드"><a class="markdownIt-Anchor" href="#반응형-그리드"></a> 반응형 그리드</h3><ul><li><code>auto-fill</code>: 너비가 허용하는만큼 최대한 많이, 다만 아이템 갯수가 부족하면 빈 공간을 남긴다.</li><li><code>auto-fit</code>: 아이템 갯수가 부족하면 남은 공간은 균등하게 분배된다.</li><li><code>minmax</code>: 너비의 최소, 최대크기를 지정할 수 있다.<ul><li>아래 예시라면 200px 의 컬럼이 몇 개 들어가는지 계산한 뒤, 남은 공간을 컬럼에 균등하게 분배된다.</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, minmax(<span class="number">200px</span>, <span class="number">1</span>fr));</span><br><span class="line">  <span class="comment">/* 컨텐츠에 따라 그리드가 길어진다. */</span></span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="built_in">minmax</span>(<span class="number">150px</span>, auto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="그리드-흐름"><a class="markdownIt-Anchor" href="#그리드-흐름"></a> 그리드 흐름</h3><ul><li><code>grid-auto-flow</code> 속성으로 조절한다.<ul><li><code>row</code>: 기본값이며 왼쪽 위부터 오른쪽으로 칸을 채워나간다.</li><li><code>column</code>: 줄을 채우고 다음 컬럼을 채운다.</li><li><code>dense</code>: 빈 공간에 채워넣는다.</li><li><code>sparse</code>: 기본값이며 빈 공간을 내버려둔다.</li></ul></li></ul><p>이 외에 <code>order</code> 속성으로 직접 순서 제어가 가능하다.<br>다만 <code>dense</code>나 <code>order</code>는 탭 순서까지 변경해주지 않아 접근성을 벗어난다.</p><h1 id="supports"><a class="markdownIt-Anchor" href="#supports"></a> supports</h1><p>구 브라우져와의 호환을 위해 <code>@supports (display: grid)</code> 처럼 서포트 피쳐쿼리를 사용할 수 있다.</p>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2020/03/01/css3-layout/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NodeJS에서 커맨드 파싱하기</title>
      <link>https://gracefullight.dev/2020/02/16/NodeJS%EC%97%90%EC%84%9C-%EC%BB%A4%EB%A7%A8%EB%93%9C-%ED%8C%8C%EC%8B%B1%ED%95%98%EA%B8%B0/</link>
      <guid>https://gracefullight.dev/2020/02/16/NodeJS%EC%97%90%EC%84%9C-%EC%BB%A4%EB%A7%A8%EB%93%9C-%ED%8C%8C%EC%8B%B1%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Sun, 16 Feb 2020 11:10:12 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;arg&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#arg&quot;&gt;&lt;/a&gt; arg&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/zeit/arg&quot; target=&quot;_blank&quot; rel=&quot;external no
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="arg"><a class="markdownIt-Anchor" href="#arg"></a> arg</h1><p><a href="https://github.com/zeit/arg" target="_blank" rel="external nofollow noopener noreferrer">zeit/arg</a> 패키지를 이용하면 된다.</p><h2 id="사용법"><a class="markdownIt-Anchor" href="#사용법"></a> 사용법</h2><p>arg 함수 하나로 파싱이 가능하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arg = <span class="built_in">require</span>(<span class="string">'arg'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// `options` is an optional parameter</span></span><br><span class="line"><span class="keyword">const</span> args = arg(spec, options = &#123;<span class="attr">permissive</span>: <span class="literal">false</span>, <span class="attr">argv</span>: process.argv.slice(<span class="number">2</span>)&#125;);</span><br></pre></td></tr></table></figure><p>세부적인 사용방법은 다음과 같다.</p><ol><li>타입을 정하고</li><li>옵션과 축약 옵션을 정하고</li><li>검증을 넣는다.</li></ol><h2 id="소스"><a class="markdownIt-Anchor" href="#소스"></a> 소스</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 계정정보를 받는 스크립트라면</span></span><br><span class="line"><span class="keyword">const</span> help = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`usage =&gt; ...`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> args = &#123;&#125;;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  args = arg(&#123;</span><br><span class="line">    <span class="string">"--help"</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">    <span class="string">"--user"</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="string">"--password"</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="string">"--verbose"</span>: arg.COUNT,</span><br><span class="line">    <span class="string">"--test"</span>: <span class="built_in">Boolean</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"-h"</span>: <span class="string">"--help"</span>,</span><br><span class="line">    <span class="string">"-u"</span>: <span class="string">"--user"</span>,</span><br><span class="line">    <span class="string">"-p"</span>: <span class="string">"--password"</span>,</span><br><span class="line">    <span class="string">"-v"</span>: <span class="string">"--verbose"</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err.code === <span class="string">"ARG_UNKNOWN_OPTION"</span>) &#123;</span><br><span class="line">    help();</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(args[<span class="string">"--user"</span>] &amp;&amp; args[<span class="string">"--password"</span>])) &#123;</span><br><span class="line">  help();</span><br><span class="line">  process.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (args[<span class="string">"--test"</span>] === <span class="literal">true</span>) &#123;</span><br><span class="line">  process.env.TEST = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2020/02/16/NodeJS%EC%97%90%EC%84%9C-%EC%BB%A4%EB%A7%A8%EB%93%9C-%ED%8C%8C%EC%8B%B1%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Workbox5 버전의 주요 변경사항</title>
      <link>https://gracefullight.dev/2020/02/02/Workbox5-breaking-changes/</link>
      <guid>https://gracefullight.dev/2020/02/02/Workbox5-breaking-changes/</guid>
      <pubDate>Sun, 02 Feb 2020 07:47:22 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;workbox5-버전&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#workbox5-버전&quot;&gt;&lt;/a&gt; Workbox5 버전&lt;/h1&gt;&lt;p&gt;잘 돌던 &lt;code&gt;workbox-cli&lt;/code&gt; 가 5버전 릴리즈 후부터 돌지
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="workbox5-버전"><a class="markdownIt-Anchor" href="#workbox5-버전"></a> Workbox5 버전</h1><p>잘 돌던 <code>workbox-cli</code> 가 5버전 릴리즈 후부터 돌지 않아서 확인해보았다.<br>전체 문서는 <a href="https://developers.google.com/web/tools/workbox/guides/migrations/migrate-from-v4" target="_blank" rel="external nofollow noopener noreferrer">여기</a>서 확인 가능하다.</p><h2 id="injectmanifest"><a class="markdownIt-Anchor" href="#injectmanifest"></a> injectManifest</h2><p><code>self.__WB_MANIFEST</code> 를 주입받는 방식으로 변경되었다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v4:</span></span><br><span class="line">precacheAndRoute([]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// v5:</span></span><br><span class="line">precacheAndRoute(self.__WB_MANIFEST);</span><br></pre></td></tr></table></figure><h2 id="navigationroute"><a class="markdownIt-Anchor" href="#navigationroute"></a> NavigationRoute</h2><p>blacklist, whitelist 에서 denylist, allowlist 로 키 명이 변경되었다.</p><h2 id="broadcastchannel"><a class="markdownIt-Anchor" href="#broadcastchannel"></a> BroadcastChannel</h2><p>broadcast-update 가 자체 API 에서 <code>postMessage()</code>로 변경되었다.<br>이벤트 리스너가 많아져 복잡해지고, 기존 API에서는 메세징의 버퍼 기능이 없었기 때문이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v4:</span></span><br><span class="line"><span class="keyword">const</span> updatesChannel = <span class="keyword">new</span> BroadcastChannel(<span class="string">'api-updates'</span>);</span><br><span class="line">updatesChannel.addEventListener(<span class="string">'message'</span>, (event) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;cacheName, updatedUrl&#125; = event.data.payload;</span><br><span class="line">  <span class="comment">// ... your code here ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// v5:</span></span><br><span class="line"><span class="comment">// This listener should be added as early as possible in your page's lifespan</span></span><br><span class="line"><span class="comment">// to ensure that messages are properly buffered.</span></span><br><span class="line">navigator.serviceWorker.addEventListener(<span class="string">'message'</span>, (event) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Optional: ensure the message came from workbox-broadcast-update</span></span><br><span class="line">  <span class="keyword">if</span> (event.meta === <span class="string">'workbox-broadcast-update'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;cacheName, updatedUrl&#125; = event.data.payload;</span><br><span class="line">      <span class="comment">// ... your code here ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2020/02/02/Workbox5-breaking-changes/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Pythonic - 핸들링</title>
      <link>https://gracefullight.dev/2020/01/27/Pythonic-handling/</link>
      <guid>https://gracefullight.dev/2020/01/27/Pythonic-handling/</guid>
      <pubDate>Mon, 27 Jan 2020 09:38:10 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;handling&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#handling&quot;&gt;&lt;/a&gt; Handling&lt;/h1&gt;&lt;h2 id=&quot;파일&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#파일&quot;&gt;&lt;/a&gt; 파
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="handling"><a class="markdownIt-Anchor" href="#handling"></a> Handling</h1><h2 id="파일"><a class="markdownIt-Anchor" href="#파일"></a> 파일</h2><ul><li>File pointer 여는 법은 <code>f.open(‘test.txt’, ‘w’)</code></li><li>이 경우 f.write 후에 f.close 해줘야한다.</li><li><code>with</code> 사용시 close 를 생각하지 않아도 된다.</li><li><code>with</code> 구문에서 선언된 변수는 바깥에서 사용가능</li><li><code>f.seek(5)</code> 처럼 위치로 이동 가능하다.</li><li><code>string.Template</code> 과 함께 뷰 파일에서 사용할 수 있다.</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 예시 1</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'Test'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 예시 2</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># print(f.read())</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        chunk = <span class="number">2</span></span><br><span class="line">        line = f.read(chunk)</span><br><span class="line">        print(line)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">        reak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 예시 3</span></span><br><span class="line"><span class="comment"># w+ 로 열면 파일이 초기화 됨</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>, <span class="string">'w+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(s)</span><br><span class="line">    <span class="comment"># 쓰기 후에 읽기위해 0번째로 이동</span></span><br><span class="line">    f.seek(<span class="number">0</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 예시 4</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'view/mail.tpl'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    t = string.Template(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># $name, $contents</span></span><br><span class="line">contents = t.substitute(name=<span class="string">'gracefullight'</span>, contents=<span class="string">'Thanks'</span>)</span><br><span class="line">print(contents)</span><br></pre></td></tr></table></figure><h3 id="파일-확인"><a class="markdownIt-Anchor" href="#파일-확인"></a> 파일 확인</h3><ul><li><code>os.path.exsists</code></li><li><code>os.path.isfile</code></li><li><code>os.path.isdir</code></li></ul><h3 id="파일-제어"><a class="markdownIt-Anchor" href="#파일-제어"></a> 파일 제어</h3><ul><li><code>os.rename</code></li><li><code>os.symlink</code>: 심볼릭</li><li><code>shutil.copy</code>: 복사</li><li><code>pathlib.Path('TouchFilePath').touch()</code>: 터치 파일</li></ul><h3 id="폴더-제어"><a class="markdownIt-Anchor" href="#폴더-제어"></a> 폴더 제어</h3><ul><li><code>os.mkdir</code></li><li><code>os.rmdir</code>: 빈 디렉토리만 가능</li><li><code>shutil.retree</code>: recursive</li></ul><h3 id="csv"><a class="markdownIt-Anchor" href="#csv"></a> CSV</h3><ul><li><code>csv.DictWriter</code></li><li><code>csv.DictReader</code></li></ul><h3 id="임시파일"><a class="markdownIt-Anchor" href="#임시파일"></a> 임시파일</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 삭제 됨</span></span><br><span class="line"><span class="keyword">with</span> tempfile.TemporaryFile(mode=<span class="string">'w+'</span>) <span class="keyword">as</span> t:</span><br><span class="line">    t.write(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 삭제 안 됨</span></span><br><span class="line"><span class="keyword">with</span> tempfile.NamedTemporaryFile(delete=<span class="literal">False</span>) <span class="keyword">as</span> t:</span><br><span class="line">    <span class="comment"># print(t.name)</span></span><br><span class="line">    <span class="keyword">with</span> open(t.name, <span class="string">'w+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 삭제되는 디렉토리</span></span><br><span class="line"><span class="keyword">with</span> tempfile.TemporaryDirectory() <span class="keyword">as</span> td:</span><br><span class="line">    print(td)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 삭제 안 되는 디렉토리</span></span><br><span class="line">temp_dir = tempfile.mkdtemp()</span><br></pre></td></tr></table></figure><h2 id="압축"><a class="markdownIt-Anchor" href="#압축"></a> 압축</h2><h3 id="tar"><a class="markdownIt-Anchor" href="#tar"></a> tar</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.open(<span class="string">'test.tar.gz'</span>, <span class="string">'w:gz'</span>) <span class="keyword">as</span> tr:</span><br><span class="line">    tr.add(<span class="string">'dir'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.open(<span class="string">'test.tar.gz'</span>, <span class="string">'r:gz'</span>) <span class="keyword">as</span> tr:</span><br><span class="line">    tr.extractall(path=<span class="string">'dir'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tr.extractfile(<span class="string">'tarball'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        print(f.read())</span><br></pre></td></tr></table></figure><h3 id="zip"><a class="markdownIt-Anchor" href="#zip"></a> zip</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(<span class="string">'test.zip'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> z:</span><br><span class="line">    <span class="comment"># 하나의 폴더만 가능</span></span><br><span class="line">    z.write(<span class="string">'dir'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 하위 전체 압축</span></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> glob.glob(<span class="string">'dir/**'</span>, recursive=<span class="literal">True</span>):</span><br><span class="line">        z.write(f)</span><br></pre></td></tr></table></figure><h3 id="ini"><a class="markdownIt-Anchor" href="#ini"></a> ini</h3><ul><li><code>configparser.ConfigParser()</code></li></ul><h3 id="yaml"><a class="markdownIt-Anchor" href="#yaml"></a> yaml</h3><ul><li><code>pip install pyyaml</code></li></ul><h2 id="로깅"><a class="markdownIt-Anchor" href="#로깅"></a> 로깅</h2><ul><li>logging.critical</li><li>error</li><li>warning</li><li>info</li><li>debug</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># basicConfig 에 format 을 정의 가능</span></span><br><span class="line"><span class="comment"># doc 확인</span></span><br><span class="line">logging.basicConfig(filename=<span class="string">'test.log'</span>, level=logging.INFO)</span><br><span class="line">logging.info(<span class="string">'info %s %s'</span>, <span class="string">'test'</span>, <span class="string">'test2'</span>) <span class="comment"># === logging.info('info &#123;&#125;'.format('test')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 해당 파일에서 로그명 재정의</span></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 로그 레벨 재정의</span></span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 전체 설정 변경</span></span><br><span class="line">logging.config.fileConfig(...)</span><br><span class="line">logging.config.dictConfig(...)</span><br></pre></td></tr></table></figure><h3 id="로깅-핸들러"><a class="markdownIt-Anchor" href="#로깅-핸들러"></a> 로깅 핸들러</h3><p>여러 핸들러를 쉽게 붙힐 수 있다. <a href="https://docs.python.org/ko/3/library/logging.handlers.html" target="_blank" rel="external nofollow noopener noreferrer">문서</a></p><ul><li><code>handler = logging.FileHandler(...)</code></li><li><code>logger.addHandler(handler)</code></li></ul><h3 id="로깅-필터"><a class="markdownIt-Anchor" href="#로깅-필터"></a> 로깅 필터</h3><p>로그의 출력을 필터를 사용해 쉽게 가공 가능하다. <a href="https://docs.python.org/ko/3/howto/logging-cookbook.html" target="_blank" rel="external nofollow noopener noreferrer">문서</a></p><h2 id="메일"><a class="markdownIt-Anchor" href="#메일"></a> 메일</h2><ul><li><code>smtplib.SMTP</code> 와 <code>from email import message</code> 패키지로 가능하다.</li><li>파일 첨부는 email.mime 의 multipart와 text 패키지로 가능하다.<ul><li>파일 추가 시에는 헤더를 <code>Content-Disposition: attachment</code>로 줘야한다.</li></ul></li><li><code>logger.handelrs.SMTPHandler</code> 로 메일로 로그를 받을 수 있다.</li></ul><h1 id="쉘"><a class="markdownIt-Anchor" href="#쉘"></a> 쉘</h1><h2 id="서브프로세스"><a class="markdownIt-Anchor" href="#서브프로세스"></a> 서브프로세스</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">subprocess.run([<span class="string">'ls'</span>, <span class="string">'-al'</span>])</span><br></pre></td></tr></table></figure><h2 id="커맨드-체이닝"><a class="markdownIt-Anchor" href="#커맨드-체이닝"></a> 커맨드 체이닝</h2><p>여러 커맨드를 한 번에 실행시킬 경우 인젝션 방어를 위해 다음과 같이 처리하는 것이 좋다.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">process1 = subprocess.Popen([<span class="string">'ls'</span>, <span class="string">'-al'</span>], stdout=subprocess.PIPE)</span><br><span class="line">process2 = subprocess.Popen([<span class="string">'grep'</span> , <span class="string">'test'</span>], stdin=p1.stdout, stdout=subprocess.PIPE)</span><br><span class="line">process1.stdout.close()</span><br><span class="line"></span><br><span class="line">output = process2.communicate()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="커맨드-파싱"><a class="markdownIt-Anchor" href="#커맨드-파싱"></a> 커맨드 파싱</h2><p><a href="https://docs.python.org/ko/3/library/argparse.html" target="_blank" rel="external nofollow noopener noreferrer">argparse</a>를 사용하자.</p><h1 id="날짜"><a class="markdownIt-Anchor" href="#날짜"></a> 날짜</h1><blockquote><p>파이썬에는 날짜를 timestamp 로 변환해 출력하는 기능은 없다.</p></blockquote><h2 id="초기화"><a class="markdownIt-Anchor" href="#초기화"></a> 초기화</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">now = datetime.datetime.now()</span><br><span class="line">print(now)</span><br><span class="line">print(now.isoformat())</span><br><span class="line">print(now.strftime(<span class="string">'%Y-%m-%d %H:%M:%S.%f'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 날짜만</span></span><br><span class="line">today = datetime.date.today()</span><br><span class="line">print(today) <span class="comment"># 2020-02-02</span></span><br><span class="line">print(today.isoformat()) <span class="comment"># 2020-02-02</span></span><br><span class="line">print(today.strftime(<span class="string">'%Y-%m-%d'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 시간만</span></span><br><span class="line">t = datetime.time(hour=<span class="number">1</span>, minute=<span class="number">10</span>, second=<span class="number">5</span>, microsecond=<span class="number">100</span>)</span><br><span class="line">print(t) <span class="comment"># 01:10:05.000100</span></span><br><span class="line">print(t.isoformat()) <span class="comment"># 01:10:05.000100</span></span><br><span class="line">print(t.strftime(<span class="string">'%H:%M:%S'</span>)) <span class="comment"># 01:10:05</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># timestamp</span></span><br><span class="line">print(time.time()) <span class="comment"># 1580617313.843047</span></span><br></pre></td></tr></table></figure><h2 id="연산"><a class="markdownIt-Anchor" href="#연산"></a> 연산</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">now = datetime.datetime.now()</span><br><span class="line">print(now)</span><br><span class="line"></span><br><span class="line">d = datetime.timedelta(weeks=<span class="number">1</span>)</span><br><span class="line">print(now - d)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2020/01/27/Pythonic-handling/#disqus_thread</comments>
    </item>
    
    <item>
      <title>쿠버네티스 리눅스 커널 튜닝하기</title>
      <link>https://gracefullight.dev/2020/01/24/k8s-linux-kernel-tuning/</link>
      <guid>https://gracefullight.dev/2020/01/24/k8s-linux-kernel-tuning/</guid>
      <pubDate>Fri, 24 Jan 2020 14:43:55 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;변경가능한-커널-설정&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#변경가능한-커널-설정&quot;&gt;&lt;/a&gt; 변경가능한 커널 설정&lt;/h1&gt;&lt;p&gt;노드 레벨의 sysctl과 네임스페이스 sysctl과 같은 커널 파라미터를 sysc
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="변경가능한-커널-설정"><a class="markdownIt-Anchor" href="#변경가능한-커널-설정"></a> 변경가능한 커널 설정</h1><p>노드 레벨의 sysctl과 네임스페이스 sysctl과 같은 커널 파라미터를 sysctl 인터페이스로 변경할 수 있다.<br>변경 가능한 파라미터는 다음과 같다.</p><ul><li><strong>abi</strong>: 실행 도메인 특성</li><li><strong>fs</strong>: 특정 파일 시스템, 파일 핸들링, inode, dentry, 쿼터 조정</li><li><strong>kernel</strong>: 전역 커널 설정 변경</li><li><strong>net</strong>: 네트워킹</li><li><strong>sunrpc</strong>: SUN rpc 호출</li><li><strong>vm</strong>: 메모리 조정, 버퍼 및 캐시 관리</li><li><strong>user</strong>: 사용자별 네임스페이스 제한</li></ul><p><code>taint, toleration</code> 을 같이 사용해 사이드이펙을 방지하라고 권하고 있다.</p><h2 id="arp-캐시"><a class="markdownIt-Anchor" href="#arp-캐시"></a> ARP 캐시</h2><blockquote><p>neighbour: arp_cache: neighbor table overflow!</p></blockquote><p>쿠버네티스가 대량의 IP를 소비하면서 ARP 캐시 공간을 모두 사용할 경우 ARP 캐시 관련 변수 조절이 가능하다.<br>대규모 HPC 클러스터에서는 흔한 일이며 쿠버네티스의 주소 소진을 방지할 수 있다.<br>이 오류는 <code>nodes with 40+ cores</code> &amp;&amp; <code>more than 16 segments in each node</code> 정도에서 발생하는 듯 하다.</p><ul><li><strong>net.ipv4.neigh.default.gc_thresh1</strong>: gc_thresh1 represents the minimum number of entries that may be in the ARP cache. Garbage collection will not be triggered if the number of entries is below this setting.</li><li><strong>net.ipv4.neigh.default.gc_thresh2</strong>: gc_thresh2 represents the soft maximum number of entries that may be in the ARP cache. This setting is arguably the most important, as ARP garbage collection will be triggered ~5s after reaching this soft maximum.</li><li><strong>net.ipv4.neigh.default.gc_thresh3</strong>: gc_thresh3 represents the hard maximum number of entries in the ARP cache.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.neigh.default.gc_thresh1 = 80000</span><br><span class="line">net.ipv4.neigh.default.gc_thresh2 = 90000</span><br><span class="line">net.ipv4.neigh.default.gc_thresh3 = 100000</span><br></pre></td></tr></table></figure><h1 id="예시"><a class="markdownIt-Anchor" href="#예시"></a> 예시</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sysctl-example</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">securityContext:</span></span><br><span class="line">    <span class="attr">sysctls:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kernel.shm_rmid_forced</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">"0"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">net.core.somaxconn</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">"10000"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kernel.msgmax</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">"65536"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">fs.file-max</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">"2097152"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">net.ipv4.ip_local_port_range</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">"1024 65536"</span></span><br></pre></td></tr></table></figure><h1 id="여담"><a class="markdownIt-Anchor" href="#여담"></a> 여담</h1><ul><li>파면 팔수록 리눅스부터 다시 정리해야되겠다는 느낌이 든다.</li></ul><h1 id="참조"><a class="markdownIt-Anchor" href="#참조"></a> 참조</h1><ul><li><a href="https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/" target="_blank" rel="external nofollow noopener noreferrer">Using sysctls in a Kubernetes Cluster</a></li><li><a href="https://meetup.toast.com/posts/54" target="_blank" rel="external nofollow noopener noreferrer">리눅스 서버의 TCP 네트워크 성능을 결정짓는 커널 파라미터 이야기 - 2편</a></li><li><a href="https://success.docker.com/article/how-to-increase-the-arp-cache-collection-threshold" target="_blank" rel="external nofollow noopener noreferrer">How to increase the ARP cache garbage collection threshold</a></li><li><a href="https://openai.com/blog/scaling-kubernetes-to-2500-nodes/" target="_blank" rel="external nofollow noopener noreferrer">Scaling Kubernetes to 2,500 nodes</a></li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2020/01/24/k8s-linux-kernel-tuning/#disqus_thread</comments>
    </item>
    
    <item>
      <title>서비스워커로 POST Request 캐싱하기</title>
      <link>https://gracefullight.dev/2020/01/16/Serviceworker-cache-POST-requests/</link>
      <guid>https://gracefullight.dev/2020/01/16/Serviceworker-cache-POST-requests/</guid>
      <pubDate>Thu, 16 Jan 2020 14:58:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;앞서&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#앞서&quot;&gt;&lt;/a&gt; 앞서&lt;/h1&gt;&lt;p&gt;서비스워커로 Navigation Request 나 Static Assets 에 대한 리소스 캐시는 쉽다.&lt;br&gt;(&lt;a href=&quot;/
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="앞서"><a class="markdownIt-Anchor" href="#앞서"></a> 앞서</h1><p>서비스워커로 Navigation Request 나 Static Assets 에 대한 리소스 캐시는 쉽다.<br>(<a href="/2017/12/22/PWA-ServiceWorker-Web-Caching/">이전 포스팅</a> 참조)</p><p>하지만 <code>POST Request</code> 에 대한 레퍼런스는 찾기 힘들어 결국 만들어버렸다.<br>복잡한 로직이지만 Request Body 를 SHA1로 해싱해 키로 IndexedDB 에 저장하고 그 키가 맞으면 꺼내주는 방식이다.</p><h1 id="소스"><a class="markdownIt-Anchor" href="#소스"></a> 소스</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IndexedDB 는 Promisify 되어있지 않아서 라이브러리가 필요하다.</span></span><br><span class="line">importScripts(<span class="string">"https://cdn.jsdelivr.net/npm/localforage@1.7.3/dist/localforage.min.js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 캐시하고 싶은 POST 엔드포인트</span></span><br><span class="line"><span class="keyword">const</span> ENDPOINT = <span class="string">'https://your-domain/post-request'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bin2Hex = <span class="function"><span class="params">buffer</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> digest = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">const</span> dataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = dataView.byteLength; i &lt; len; i += <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> value = dataView.getUint32(i);</span><br><span class="line">    <span class="comment">// hex 로 바꾸면 패딩비트 0 이 제거된다.</span></span><br><span class="line">    <span class="keyword">let</span> hex = value.toString(<span class="number">16</span>);</span><br><span class="line">    <span class="comment">// uint32 는 4bytes 로 나온다.</span></span><br><span class="line">    <span class="keyword">let</span> padding = <span class="string">'00000000'</span>;</span><br><span class="line">    <span class="comment">// 패딩을 더해서 뒤에서 잘라준다.</span></span><br><span class="line">    <span class="keyword">let</span> paddedValue = (padding + hex).slice(-padding.length);</span><br><span class="line">    digest += paddedValue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> digest;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postRequestFetchListener = <span class="function"><span class="params">fetchEvent</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> requestUrl = fetchEvent.request.url;</span><br><span class="line">  <span class="keyword">const</span> method = fetchEvent.request.method.toUpperCase();</span><br><span class="line">  <span class="comment">// 맞는 엔드포인트인지 확인</span></span><br><span class="line">  <span class="keyword">if</span> (!(method === <span class="string">'POST'</span> &amp;&amp; requestUrl === ENDPOINT)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fetchEvent.respondWith(</span><br><span class="line">    fetchEvent.request.clone().arrayBuffer().then(<span class="function"><span class="params">buffer</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> requestBody = <span class="built_in">String</span>.fromCharCode.apply(<span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer));</span><br><span class="line">      <span class="comment">// request body 에 원하는 조건만 캐시처리할 수 있게 한다.</span></span><br><span class="line">      <span class="keyword">if</span> (requestBody.includes(<span class="string">'cache=1'</span>)) &#123;</span><br><span class="line">        <span class="comment">// 속도면에서 다른 해싱 알고리즘을 사용해도 무방하다.</span></span><br><span class="line">        <span class="keyword">return</span> crypto.subtle.digest(<span class="string">'SHA-1'</span>, buffer);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject();</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">sha1Buffer</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> sha1Hash = bin2Hex(sha1Buffer);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'SHA1 Hash =&gt; '</span>, sha1Hash);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// IndexedDB 에서 캐시된 키를 찾는다.</span></span><br><span class="line">      <span class="keyword">return</span> localforage.getItem(sha1Hash)</span><br><span class="line">        .then(<span class="function"><span class="params">cachedResponse</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (cachedResponse) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Cached repsonse =&gt; '</span>, cachedResponse);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Response(cachedResponse, &#123;</span><br><span class="line">              <span class="comment">// 여기서 statusCode 를 304 로 내보내고 싶었으나, Body 를 반환할 수 없었다.</span></span><br><span class="line">              status: <span class="number">200</span>,</span><br><span class="line">              statusText: <span class="string">'OK'</span>,</span><br><span class="line">              headers: &#123;</span><br><span class="line">                <span class="string">'Content-Length'</span>: cachedResponse.length,</span><br><span class="line">                <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">                <span class="comment">// 그래서 커스텀 헤더를 추가했다.</span></span><br><span class="line">                <span class="string">'X-SW-Cache-Hit'</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">'X-SW-Cache-Type'</span>: <span class="string">'POST'</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 캐시된 데이터가 없을 경우 새로 요청한다.</span></span><br><span class="line">          <span class="keyword">return</span> fetch(fetchEvent.request).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Fetching response =&gt; '</span>, response.clone());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 정상적일 경우만 IndexedDB 에 저장한다.</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">200</span> &lt;= response.status &amp;&amp; response.status &lt; <span class="number">400</span>) &#123;</span><br><span class="line">              <span class="comment">// 이 작업은 비동기지만 굳이 기다리지 않아도 된다.</span></span><br><span class="line">              response.clone().text().then(<span class="function"><span class="params">textResponse</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'Caching response =&gt; '</span>, textResponse);</span><br><span class="line">                <span class="keyword">return</span> localforage.setItem(sha1Hash, textResponse);</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> fetch(fetchEvent.request))</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리스너를 등록해준다.</span></span><br><span class="line">self.addEventListener(<span class="string">'fetch'</span>, postRequestFetchListener);</span><br></pre></td></tr></table></figure><h1 id="여담"><a class="markdownIt-Anchor" href="#여담"></a> 여담</h1><ul><li>WorkBox 를 사용할 수 있다면 <a href="https://developers.google.com/web/tools/workbox/modules/workbox-cacheable-response#caching_based_on_headers" target="_blank" rel="external nofollow noopener noreferrer">CacheableResponse</a>와 CacheFirst 정책으로 단번에 처리 가능할 것이다.</li><li>굳이 해시를 키로 사용하지 않아도 된다. RequestBody 의 Serialize 를 키로 써도 된다. (만들면서 crypto 라이브러리를 사용해보고 싶었을 뿐)</li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2020/01/16/Serviceworker-cache-POST-requests/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Dockerfile의 모든 것</title>
      <link>https://gracefullight.dev/2020/01/13/Dockerfile%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83/</link>
      <guid>https://gracefullight.dev/2020/01/13/Dockerfile%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83/</guid>
      <pubDate>Mon, 13 Jan 2020 13:36:44 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;인스트럭션&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#인스트럭션&quot;&gt;&lt;/a&gt; 인스트럭션&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;FROM&lt;/strong&gt;: 빌드하는 이미지의 기반 이미지 지정&lt;/li&gt;&lt;li&gt;&lt;strong&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="인스트럭션"><a class="markdownIt-Anchor" href="#인스트럭션"></a> 인스트럭션</h1><ul><li><strong>FROM</strong>: 빌드하는 이미지의 기반 이미지 지정</li><li><strong>RUN</strong>: 이미지 빌드 시 컨테이너에서 실행할 명령어 정의</li><li><strong>COPY</strong>: 호스트에서 컨테이너로 파일 및 디렉토리 복사</li><li><strong>ADD</strong>: COPY + 압축 해제 + URL 다운로드<ul><li>운영 체제를 담은 기반 이미지를 만드는 경우처럼 특수한 경우에만 사용하면 된다.</li><li>안정성 보장이 되지 않으므로 COPY 를 사용하자.</li></ul></li><li><strong>CMD</strong>: 컨테이너에서 foreground로 실행할 명령어 정의</li><li><strong>ENTRYPOINT</strong>: 컨테이너를 실행 가능 파일로 사용할 때 정의하는 명령<ul><li>CMD 와 ENTRYPOINT 둘 다 사용 가능</li></ul></li><li><strong>ARG</strong>: docker image build를 실행할 때 사용하는 변수</li><li><strong>ENV</strong>: 컨테이너 안의 환경변수 정의</li><li><strong>EXPOSE</strong>: 컨테이너가 노출하는 포트</li><li><strong>VOLUME</strong>: 호스트나 다른 컨테이너에서 마운트할 수 있는 포인트 생성</li><li><strong>LABEL</strong>: 이미지에 추가하는 메타데이터</li><li><strong>STOPSIGNAL</strong>: 컨테이너에 전달되면 컨테이너를 종료하는 시스템 시그널 설정</li><li><strong>HEALTHCHECK</strong>: 컨테이너 안에서 명령을 실행 후 결과를 헬스 체크에 사용</li><li><strong>USER</strong>: 컨테이너 실행 시 컨테이너 사용자<ul><li>이미지 빌드시 USER 뒤에 나오는 RUN 인스트럭션도 해당 사용자의 권한으로 실행된다.</li></ul></li><li><strong>WORKDIR</strong>: 컨테이너의 작업 디렉토리</li><li><strong>ONBUILD</strong>: 컨테이너 안에서 실행되는 명령 정의, 이미지에서 실행되지 않는다.<ul><li>ONBUILD 를 정의한 이미지를 기반 이미지로 삼아 다른 이미지를 빌드할 때 실행된다.</li></ul></li></ul><h1 id="이미지"><a class="markdownIt-Anchor" href="#이미지"></a> 이미지</h1><h2 id="린팅"><a class="markdownIt-Anchor" href="#린팅"></a> 린팅</h2><p><a href="https://github.com/hadolint/hadolint" target="_blank" rel="external nofollow noopener noreferrer">hadolint</a> 를 설치해 <a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/" target="_blank" rel="external nofollow noopener noreferrer">Dockerfile best practices</a> 에 기반해 이미지를 생성했는지 검증하자.</p><h2 id="기반-이미지"><a class="markdownIt-Anchor" href="#기반-이미지"></a> 기반 이미지</h2><ul><li>scratch: 아무 것도 없는 이미지<ul><li>https 통신이 필요한 경우 cacert.pem 을 /etc/ssl/certs 에 추가해야한다.</li><li>디버깅도 힘들다</li></ul></li><li>busybox: 기본 유틸리티 (echo, ls 등) 이 있는 이미지<ul><li>패키지 관리자가 없다.</li><li>디버깅은 좀 낫다.</li></ul></li><li>alpine: busybox 기반으로 4MB 지만 <code>apk</code> 패키지 매니저가 있다.<ul><li><code>glibc</code> 대신 <code>musl</code>을 쓴다.</li><li><code>apk add --no-cache package</code></li><li><code>apk add --no-cache --virtual=ailas package</code> &amp;&amp; <code>apk del --no-cache ailas</code></li></ul></li></ul><h2 id="멀티스테이지-빌드"><a class="markdownIt-Anchor" href="#멀티스테이지-빌드"></a> 멀티스테이지 빌드</h2><p>golang과 같은 빌드가 필요한 이미지에서는 멀티스테이지 빌드를 이용해 빌드 환경과 프로덕션 환경을 다르게 가져갈 수 있다.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.9</span> AS build</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /go/src/github.com/...</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go get gokpg.in/gorp.v1</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /go/src/github.com/... &amp;&amp; go build -o bin/start main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.7</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build /go/src/.../bin/start /usr/<span class="built_in">local</span>/bin/</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"start"</span>]</span></span><br></pre></td></tr></table></figure><h2 id="distroless-이미지"><a class="markdownIt-Anchor" href="#distroless-이미지"></a> distroless 이미지</h2><ul><li>운영체제 기능은 없이 언어에 중점을 둔 이미지이다.</li><li><a href="https://github.com/GoogleContainerTools/distroless" target="_blank" rel="external nofollow noopener noreferrer">distroless</a> 에서 확인 가능하며 주로 구글이 배포한다.</li><li><a href="http://gcr.io/distroless/base" target="_blank" rel="external nofollow noopener noreferrer">gcr.io/distroless/base</a> 이미지는 glibc 기반이며 컴파일 애플리케이션을 실행하는 데에 적합하다. (Go)</li><li>ca-certificates 및 TLS/SSL 관련 라이브러리 등 최소한의 라이브러리만 있다.</li><li>CVE 취약점도 업데이트 된다고 한다.</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">10.17</span>.<span class="number">0</span> AS build-<span class="keyword">env</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> gcr.io/distroless/nodejs</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build-env /app /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"hello.js"</span>]</span></span><br></pre></td></tr></table></figure><h2 id="chucksum-검증"><a class="markdownIt-Anchor" href="#chucksum-검증"></a> chucksum 검증</h2><p><code>ADD</code> 인스트럭션으로 추가 된 파일은 해시기반 체크섬 검증을 해주는 것이 좋다.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> library.zip .</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> library_SHA256 .</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> library_SHA256.sig .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Import PGP public key</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl https://.../pgp_keys.asc | gpg --import</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 라이브러리 전자 서명 검증</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> gpg --verify library_SHA256.sig library_SHA256</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Verify checksum</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> cat library_SHA256 | grep linux_amd64 | sha256sum -cs</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> unzip libary.zip</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mv library /usr/<span class="built_in">local</span>/bin</span></span><br><span class="line"><span class="comment"># 실행</span></span><br></pre></td></tr></table></figure><h2 id="dockerigonore"><a class="markdownIt-Anchor" href="#dockerigonore"></a> dockerigonore</h2><ul><li>Dockerfile 빌드 시에 따라 들어가지 않게 된다.</li><li>Dockerfile 과 같은 레벨 디렉토리에 있어야한다.</li></ul><figure class="highlight"><figcaption><span>.dockerignore</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.git</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">.github</span><br><span class="line">*.log</span><br></pre></td></tr></table></figure><h2 id="이미지-테스트"><a class="markdownIt-Anchor" href="#이미지-테스트"></a> 이미지 테스트</h2><p>빌드 후의 이미지 내부에 상태가 적절한지 테스트하기 위해 아래 두 가지 yaml 기반의 테스트 툴을 사용할 수 있다.</p><ul><li><a href="https://github.com/GoogleContainerTools/container-structure-test" target="_blank" rel="external nofollow noopener noreferrer">container-structure-test</a></li><li><a href="https://github.com/aelsabbahy/goss" target="_blank" rel="external nofollow noopener noreferrer">goss</a></li></ul><p>이 중 <strong>goss</strong>는 실제 포트 및 서비스가 서빙 중인지 확인이 가능해 더 유용할 것으로 보인다.</p><h2 id="이미지-보안"><a class="markdownIt-Anchor" href="#이미지-보안"></a> 이미지 보안</h2><h3 id="user"><a class="markdownIt-Anchor" href="#user"></a> user</h3><p>호스트의 리소스를 컨테이너에서 공유하는 Docker는 사용자 UID도 0으로 같이 공유되므로 같은 권한을 갖게 된다.<br>이 문제를 방지하기 위해 <code>useradd</code> 로 어플리케이션 실행 유저를 만들어 주고 <code>USER</code> 인스트럭션을 사용해 실행을 해줘야한다.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> main.go /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> useradd gracefullight</span></span><br><span class="line"><span class="keyword">USER</span> gracefullight</span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"go"</span>, <span class="string">"RUN"</span>, <span class="string">"/app/main.go"</span>]</span></span><br></pre></td></tr></table></figure><h3 id="secret"><a class="markdownIt-Anchor" href="#secret"></a> secret</h3><ul><li><a href="https://www.vaultproject.io/docs/install/" target="_blank" rel="external nofollow noopener noreferrer">Vault</a></li></ul><h1 id="dockerd-튜닝"><a class="markdownIt-Anchor" href="#dockerd-튜닝"></a> dockerd 튜닝</h1><ul><li>max-concurrent-downloads: 기본값은 3이며, <code>docker image pull</code> 로 한 번에 다운로드 되는 이미지 스레드 수를 증가시켜준다.</li><li>max-concurrent-uploads: 기본값은 5이며, <code>docker image push</code> 시에 이미지 업로드 스레드 수를 증가시켜준다.</li><li>registry-mirrors: Docker hub의 미러 레지스트리를 만들어 트래픽 향상에 이점을 줄 수 있다.</li></ul><h1 id="private-registry"><a class="markdownIt-Anchor" href="#private-registry"></a> private registry</h1><p>빠른 이미지 푸쉬/풀과 소스 때문이라도 private registry 는 필수적이다.<br>docker 에서 제공하는 registry 이미지를 사용하면 된다.</p><p>GUI 기반으로 확인할 수 있는 툴은 아래와 같다.</p><ul><li><a href="https://github.com/goharbor/harbor" target="_blank" rel="external nofollow noopener noreferrer">Harbor</a>: 프라이빗 레포지토리를 위한 모든 기능이 다 있다. 쓰자.</li><li><a href="https://github.com/SUSE/Portus" target="_blank" rel="external nofollow noopener noreferrer">Portus</a>: 인증 포함, 하지만 루비라 소스 개선이 힘들듯</li><li><a href="https://github.com/Joxit/docker-registry-ui" target="_blank" rel="external nofollow noopener noreferrer">docker-registry-ui</a>: 20년 최근까지 개선 중</li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2020/01/13/Dockerfile%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83/#disqus_thread</comments>
    </item>
    
    <item>
      <title>쿠버네티스 로그 아키텍쳐</title>
      <link>https://gracefullight.dev/2020/01/01/kubernetes-log-architecture/</link>
      <guid>https://gracefullight.dev/2020/01/01/kubernetes-log-architecture/</guid>
      <pubDate>Wed, 01 Jan 2020 06:53:58 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;관리-원칙&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#관리-원칙&quot;&gt;&lt;/a&gt; 관리 원칙&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;어플리케이션 로그는 모두 stdout 으로 출력해야한다.&lt;ul&gt;&lt;li&gt;컨테이너로 운영하는 것을 전제로 한다
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="관리-원칙"><a class="markdownIt-Anchor" href="#관리-원칙"></a> 관리 원칙</h1><ul><li>어플리케이션 로그는 모두 stdout 으로 출력해야한다.<ul><li>컨테이너로 운영하는 것을 전제로 한다면 파일 출력 자체가 불필요하다.</li></ul></li><li>Nginx 등의 미들웨어에서는 로그가 stdout 으로 출력되도록 이미지를 빌드한다.</li><li>stdout 으로 출력되는 로그는 모두 JSON 포맷으로 출력해 각 속성을 검색할 수 있게 한다.</li><li>쿠버네티스 환경에서는 <code>fluentd-kubernetes-daemonset</code> 을 포함하는 파드를 <code>DaemonSet</code>을 사용해 각 호스트에 배치한다.</li><li>쿠버네티스 리소스에서는 적절히 레이블을 부여해 로그를 검색할 수 있게 한다.</li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2020/01/01/kubernetes-log-architecture/#disqus_thread</comments>
    </item>
    
    <item>
      <title>맥 추천 패키지</title>
      <link>https://gracefullight.dev/2019/12/29/mac-recommended-packages/</link>
      <guid>https://gracefullight.dev/2019/12/29/mac-recommended-packages/</guid>
      <pubDate>Sun, 29 Dec 2019 04:57:47 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;여러 맥 기기의 환경을 구성하다보니 적어 놓는 게 나을 듯 싶었다.&lt;/p&gt;&lt;h1 id=&quot;brew&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#brew&quot;&gt;&lt;/a&gt; brew&lt;/h1&gt;&lt;figure class=&quot;highlight b
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>여러 맥 기기의 환경을 구성하다보니 적어 놓는 게 나을 듯 싶었다.</p><h1 id="brew"><a class="markdownIt-Anchor" href="#brew"></a> brew</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><h2 id="formulae"><a class="markdownIt-Anchor" href="#formulae"></a> formulae</h2><h3 id="main-formulae"><a class="markdownIt-Anchor" href="#main-formulae"></a> main formulae</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">brew install azure-cli \</span><br><span class="line">  fzf \</span><br><span class="line">  git \</span><br><span class="line">  go \</span><br><span class="line">  java \</span><br><span class="line">  kubernetes-cli \</span><br><span class="line">  mas \</span><br><span class="line">  node \</span><br><span class="line">  python \</span><br><span class="line">  stern \</span><br><span class="line">  tree \</span><br><span class="line">  wget</span><br></pre></td></tr></table></figure><ul><li>azure-cli</li><li>fzf</li><li>git</li><li>go</li><li>java</li><li>kubernetes-cli</li><li>mas</li><li>node</li><li>python</li><li>stern</li><li>tree</li><li>wget</li></ul><h3 id="sub-formulae"><a class="markdownIt-Anchor" href="#sub-formulae"></a> sub formulae</h3><blockquote><p><a href="https://docs.docker.com/docker-for-mac/install/" target="_blank" rel="external nofollow noopener noreferrer">docker for mac</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew tap pivotal/tap</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">brew install anaconda \</span><br><span class="line">  dep \</span><br><span class="line">  helm \</span><br><span class="line">  kubectx \</span><br><span class="line">  springboot \</span><br><span class="line">  thefuck \</span><br><span class="line">  yarn \</span><br><span class="line">  youtube-dl \</span><br><span class="line">  zsh-autosuggestions \</span><br><span class="line">  zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><ul><li>anaconda</li><li>dep</li><li>helm</li><li>kubectx</li><li>springboot</li><li>thefuck</li><li>yarn</li><li>youtube-dl</li><li>zsh-autosuggestions</li><li>zsh-syntax-highlighting</li></ul><h2 id="cask"><a class="markdownIt-Anchor" href="#cask"></a> cask</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap homebrew/cask-fonts</span><br><span class="line">brew tap adoptopenjdk/openjdk</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">brew cask install adguard \</span><br><span class="line">  adoptopenjdk11 \</span><br><span class="line">  battle-net \</span><br><span class="line">  bitwarden \</span><br><span class="line">  cheatsheet \</span><br><span class="line">  cleanmymac \</span><br><span class="line">  firefox \</span><br><span class="line">  flux \</span><br><span class="line">  font-cascadia \</span><br><span class="line">  font-hack-nerd-font \</span><br><span class="line">  fork \</span><br><span class="line">  google-chrome \</span><br><span class="line">  haptickey \</span><br><span class="line">  hiddenbar \</span><br><span class="line">  iina \</span><br><span class="line">  iterm2 \</span><br><span class="line">  java \</span><br><span class="line">  jetbrains-toolbox \</span><br><span class="line">  keepingyouawake \</span><br><span class="line">  keka \</span><br><span class="line">  kitematic \</span><br><span class="line">  mattermost \</span><br><span class="line">  microsoft-edge \</span><br><span class="line">  pock \</span><br><span class="line">  sequel-pro \</span><br><span class="line">  slack \</span><br><span class="line">  telegram-desktop \</span><br><span class="line">  udeler \</span><br><span class="line">  yt-music</span><br></pre></td></tr></table></figure><ul><li>adguard: 💰</li><li>adoptopenjdk11: 자바</li><li>battle-net: 배틀넷</li><li>bitwarden: 비밀번호 관리</li><li>cheatsheet: ⌘ 키를 오래 누르면 해당 프로그램의 모든 단축키를 볼 수 있음</li><li>cleanmymac: 💰</li><li>firefox: 파이어폭스</li><li>flux: 블루라이트 차단</li><li>font-cascadia: Cascadis Code 폰트</li><li>font-hack-nerd-font: iTerm2 용 터미널 폰트</li><li>fork: 무료 중 최고의 git client</li><li>google-chrome: 크롬</li><li>haptickey: 터치바 반응성 추가</li><li>hiddenbar: 작업표시줄의 프로그램 숨기기</li><li>iina: 깔끔한 인터페이스의 미디어 플레이어</li><li>iterm2: 터미널</li><li>jetbrains-toolbox: jetbrains IDE 버전 관리</li><li>keepingyouawake: 잠자기 모드 제어</li><li>keka: 압축 프로그램</li><li>kitematic: 컨테이너 쇼핑</li><li>mattermost: 매터모스트</li><li>microsoft-edge: edge</li><li>pock: 터치바를 Dock으로 만들어줌</li><li>sequel-pro: MySQL GUI client</li><li>slack: 슬랙</li><li>telegram-desktop: 텔레그램</li><li>udeler: udemy 강의 다운로더</li><li>yt-music: 유튜브 뮤직 플레이어</li></ul><h1 id="app-store"><a class="markdownIt-Anchor" href="#app-store"></a> App store</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mas install 497799835 \</span><br><span class="line">  1355679052 \</span><br><span class="line">  869223134 \</span><br><span class="line">  441258766 \</span><br><span class="line">  1295203466 \</span><br><span class="line">  1274495053 \</span><br><span class="line">  1289197285 \</span><br><span class="line">  1471801525 \</span><br><span class="line">  897118787 \</span><br><span class="line">  1176895641 \</span><br><span class="line">  425424353 \</span><br><span class="line">  1475628500</span><br></pre></td></tr></table></figure><ul><li>xcode: <strong>497799835</strong></li><li>dropover: <strong>1355679052</strong> 드래그 후 흔들면 가상폴더로 저장</li><li>kakaotalk: <strong>869223134</strong> 카카오톡</li><li>magnet: 💰 <strong>441258766</strong> 창 크기 전환</li><li>microsoft remote desktop: <strong>1295203466</strong> 윈도우 원격</li><li>microsoft todo: <strong>1274495053</strong> todo 관리</li><li>mindnode: <strong>1289197285</strong> 마인드맵</li><li>polyglot: <strong>1471801525</strong> 사파리 번역기</li><li>shazam: <strong>897118787</strong> 음악 찾기</li><li>spark: <strong>1176895641</strong> 최고의 mail client</li><li>unicorn https: <strong>1475628500</strong> Encrypt DNS query</li></ul><h1 id="개선"><a class="markdownIt-Anchor" href="#개선"></a> 개선</h1><ul><li><a href="https://github.com/Homebrew/homebrew-bundle" target="_blank" rel="external nofollow noopener noreferrer">bundle</a> 처리</li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/12/29/mac-recommended-packages/#disqus_thread</comments>
    </item>
    
    <item>
      <title>쿠버네티스 롤링 업데이트와 배포</title>
      <link>https://gracefullight.dev/2019/12/27/kubernetes-rolling-update/</link>
      <guid>https://gracefullight.dev/2019/12/27/kubernetes-rolling-update/</guid>
      <pubDate>Fri, 27 Dec 2019 11:43:20 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;deployment&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#deployment&quot;&gt;&lt;/a&gt; Deployment&lt;/h1&gt;&lt;p&gt;Deployment 의 파드 교체 전략에는 &lt;strong&gt;RollingUpdate&lt;/st
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="deployment"><a class="markdownIt-Anchor" href="#deployment"></a> Deployment</h1><p>Deployment 의 파드 교체 전략에는 <strong>RollingUpdate</strong> 와 <strong>Recreate</strong> 가 있다.<br>기본 값은 <strong>RollingUpdate</strong> 이며 간단한 설정이 적용된 디플로이먼트는 아래와 같을 것이다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-rolling-update</span></span><br><span class="line">  <span class="attr">label:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">maxSerge:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">echo</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>여기서 롤링업데이트 속성을 좀 더 자세히 알아보자.</p><h2 id="rollingupdate"><a class="markdownIt-Anchor" href="#rollingupdate"></a> RollingUpdate</h2><h3 id="maxunavailable"><a class="markdownIt-Anchor" href="#maxunavailable"></a> maxUnavailable</h3><ul><li>롤링 업데이트 중 동시에 삭제할 수 있는 파드의 최대 갯수</li><li>기본 값은 replicas의 25% 이다.</li><li><code>replicas: 4</code>의 경우 1개 파드 삭제, <code>replicas: 8</code>의 경우 2개 파드 동시 삭제</li><li>퍼센트 및 직접 지정이 가능하다.</li><li>위의 예시 디플로이먼트에서 롤링업데이트 시작 시 파드 3개가 바로 죽는다.</li><li>이 값을 높게 설정하면 동시에 교체되는 파드가 늘어나므로 롤링 업데이트 시간이 줄어든다.<ul><li>하지만 롤링업데이트 중에 남아 있는 파드에 요청 수가 몰릴 수 있다.</li><li>따라서 <code>1</code>로 설정해 파드를 하나씩 교체하는 것이 안전할 수 있다.</li></ul></li></ul><h3 id="maxsurge"><a class="markdownIt-Anchor" href="#maxsurge"></a> maxSurge</h3><ul><li>롤링 업데이트 중 동시에 생성하는 파드 갯수</li><li>기본 값은 replicas의 25% 이다.</li><li><code>replicas: 4</code>면서 <code>maxSurge: 4</code>면 롤링 업데이트 시작 시 새 버전의 파드가 4개 추가로 생성된다.</li><li>이 값을 높게 설정하면 필요한 파드를 빨리 생성하므로 파드 교체 시간이 단축된다.<ul><li>하지만 필요한 시스템 자원이 급증할 수 있다.</li></ul></li></ul><h2 id="probe"><a class="markdownIt-Anchor" href="#probe"></a> Probe</h2><p>세부 설정은 <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes" target="_blank" rel="external nofollow noopener noreferrer">Docs</a>를 참조하자</p><h3 id="livenessprobe"><a class="markdownIt-Anchor" href="#livenessprobe"></a> livenessProbe</h3><ul><li>애플리케이션 헬스 체크 기능</li><li>애플리케이션이 의존하는 컨테이너 안의 파일의 존재여부 확인</li><li>Unhealthy 상태의 경우 파드 재시작</li></ul><h3 id="readinessprobe"><a class="markdownIt-Anchor" href="#readinessprobe"></a> readinessProbe</h3><ul><li>컨테이너 외부에서 HTTP 등의 트래픽을 발생시켜 처리할 수 있는 상태인지 확인</li><li><code>tcpSocket</code>으로 포트 지정도 가능하다.</li></ul><h2 id="응답-중인-파드-교체"><a class="markdownIt-Anchor" href="#응답-중인-파드-교체"></a> 응답 중인 파드 교체</h2><p>응답 중인 파드가 교체되는 경우 <code>SIGTERM</code> 신호를 보내 파드가 삭제되는데,<br><code>Graceful Shutdown</code> 상태로 만들기 위해서 종료 처리가 오래 걸리는 파드엔 <strong>terminationGracePeriodSeconds</strong> 를 설정해주는 것이 좋다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 기본값 30</span></span><br><span class="line">  <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">40</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">maria</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">maria:latest</span></span><br></pre></td></tr></table></figure><p><em>Nginx</em>처럼 <code>SIGTERM</code> 시그널을 받고 바로 종료되는 어플리케이션이 있는 파드라면, 라이플사이클 훅을 활용해 안전하게 종료시키는 것이 중요하다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">lifecycle:</span></span><br><span class="line">      <span class="comment"># 파드 종료 전 훅</span></span><br><span class="line">      <span class="attr">preStop:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">["/usr/sbin/nginx",</span> <span class="string">"-s"</span><span class="string">,</span> <span class="string">"quit"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><h2 id="파드-11-교체"><a class="markdownIt-Anchor" href="#파드-11-교체"></a> 파드 1:1 교체</h2><p>그렇다면 <code>replicas: 1</code>인 파드를 1:1 교체 시에는 어떤 전략을 가져가야할까<br>답은 아래와 같다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">strategy:</span></span><br><span class="line"> <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line"> <span class="attr">rollingUpdate:</span></span><br><span class="line">   <span class="comment"># 롤링 업데이트 시 삭제 되는 파드 수</span></span><br><span class="line">   <span class="attr">maxUnavailable:</span> <span class="number">0</span></span><br><span class="line">   <span class="comment"># 롤링 업데이트 시 새로 생성되는 파드 수</span></span><br><span class="line">   <span class="attr">maxSurge:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>여기에 파드가 트래픽을 받을 수 있는지 <code>readinessProbe</code>를 추가해주면 된다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">readinessProbe:</span></span><br><span class="line">  <span class="attr">httpGet:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/ping</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">periodSeconds:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>5초 후에 5초마다 <code>/ping</code> 을 보내 성공여부를 확인한다.<br>타임아웃은 3초며 3번까지 재시도한다.</p><h2 id="bluegreen"><a class="markdownIt-Anchor" href="#bluegreen"></a> Blue/Green</h2><ul><li>디플로이먼트를 2개 만들고, 서비스의 selector 값을 라벨에 따라 변경하자.</li><li>서비스메시를 연동하면 카나리아 배포 방식도 가능하다.</li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/12/27/kubernetes-rolling-update/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Pythonic - 기본기</title>
      <link>https://gracefullight.dev/2019/12/15/Pythonic-the-basics/</link>
      <guid>https://gracefullight.dev/2019/12/15/Pythonic-the-basics/</guid>
      <pubDate>Sun, 15 Dec 2019 07:52:01 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;the-basics&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#the-basics&quot;&gt;&lt;/a&gt; The Basics&lt;/h1&gt;&lt;h2 id=&quot;types&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#t
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="the-basics"><a class="markdownIt-Anchor" href="#the-basics"></a> The Basics</h1><h2 id="types"><a class="markdownIt-Anchor" href="#types"></a> Types</h2><ul><li>아무 것도 없는 타입은 <code>None</code></li><li>주석<ul><li><code>#</code></li><li><code>&quot;&quot;&quot; &quot;&quot;&quot;</code></li></ul></li><li>포매팅<ul><li><code>f’test {변수}'</code></li><li><code>&quot;test {}&quot;.format(변수)</code></li></ul></li><li><code>list</code>, <code>dict</code>, <code>set</code> 등은 <strong>immutable</strong> 하지 않아 <code>copy</code> 메소드를 사용해 복사 필요</li><li>스왑<ul><li>a, b = b, a 로 한 줄로 가능</li></ul></li><li>set<ul><li><code>{}</code> 으로 set 지정가능</li><li>집합연산 가능</li><li><code>set([])</code> 로 배열을 set으로 변환 가능</li></ul></li><li>enum<ul><li>튜플로 지정하면 됨</li><li>튜플은 <strong>freeze</strong> 되어 있다.</li><li><code>('a', 'b', 'c')</code></li></ul></li><li>list<ul><li>merge는 더하기로 가능 <code>[] + []</code></li></ul></li></ul><h2 id="operaters"><a class="markdownIt-Anchor" href="#operaters"></a> Operaters</h2><ul><li>if<ul><li>값 체킹에는 <code>0.0</code> <code>''</code> <code>[]</code> <code>()</code> <code>{}</code> <code>set()</code> 등 모든 빈 값이 <code>false</code> 로 떨어진다.<ul><li>따라서 <s>len(foo) &gt; 0</s> 보다 권장</li></ul></li><li><s>if foo != True</s> 보다 <code>if not foo</code> 를 권장</li><li>dict 키 검증 시에는 <code>if 'key' in d:</code> 를 권장 <s>if ‘key’ in d.keys():</s> 필요없다.</li><li><code>y=None</code> <code>x = 1 if y else 2</code> 면 x=2 라는 문법이 된다.</li></ul></li><li>is 문은 값이 None 인지 확인할 때 권장<ul><li><s>if foo == None</s> 보다 <code>if foo is None</code> 을 권장</li><li><code>if foo is not None</code></li></ul></li><li>while<ul><li><code>while else</code> 구문 가능<br>else 는 while 에 break 가 없을 경우 while 끝나고 실행</li></ul></li><li>for<ul><li><code>for in</code></li><li><code>for in else</code> 구문 가능<br>else는 for 에 break 가 없을 경우 for 끝나고 실행</li><li><code>for _ in range(10)</code> 처럼 underscore 는 index 를 안쓸때 권장</li><li><code>for i, item in enumerate(['a', 'b', 'c'])</code> 처럼 index 넣어줄 수 있음</li><li><code>for day, fruit in zip(days, fruit)</code> 처럼 패킹(zip) 함수 기본 제공</li><li><code>for k, v in d.items()</code> 로 dict 타입 반복 가능</li></ul></li><li>func<ul><li><code>def func():</code> 로 함수선언</li><li><code>def add(a: int, b: int) -&gt; int:</code> 처럼 파라미터 및 리턴 타입 정의 가능<ul><li>compile error 발생 안 함</li><li>보여주기 위한 타입 기능</li></ul></li><li>매개변수를 위치 인수로 넣을 수 있음<ul><li><code>def menu(entree, drink)</code>라면 <code>menu(drink='a', entree='b')</code> 로 호출 가능</li></ul></li><li>list 매개변수는 기본값으로 넣으면 안 됨 <code>def foo(list=[])</code> 면 리스트가 <strong>한 번만</strong> 생성됨 (함수 내부 초기화 필요)</li><li><code>def func(*args)</code> 로 동적매개변수 처리 가능 <strong>튜플로 처리됨</strong></li><li><code>def func(**kargs)</code> 로 넣으면 dict로 전달가능 <code>func(key1='val', key2='val')</code></li><li>두 구문을 같이쓸 수 있지만 <code>*args</code>는 <code>**kargs</code> 보다 <strong>먼저 와야한다.</strong></li><li>함수 내부 <code>&quot;&quot;&quot; &quot;&quot;&quot;</code> doc 주석을 넣으면 <code>help(func.__doc__), help(func)</code> 로 도움말 호출 가능</li><li>클로져로 wrapper 함수를 만들면 <strong>데코레이터</strong>로 바로 적용 가능</li><li><code>func(lists, lambda item: item.value())</code> 람다 처리가능 (value: returnValue)</li></ul></li><li><strong>비추천</strong> <code>dic = {x: y for x, y in (zip(w, f)}</code> 처럼 한 번에 for문 dictionary 선언 가능</li><li>genarator<ul><li>def + yield</li><li><code>gen = (i for i in range(10) if i % 2 == 0)</code> 처럼 한 번에 선언하면 제네레이터가 된다.</li><li><code>tuple(gen)</code> 하면 튜플로 처리된다.</li><li>for 보다 빠를 수 있다.</li></ul></li><li><code>globals()</code>, <code>locals()</code> 로 전역, 로컬변수 확인가능</li><li>excpetion<ul><li><code>try: except IndexError as ex: finally:</code></li><li><code>try: except: else: finally:</code> 가 있다면 try =&gt; else =&gt; finally 로 실행</li><li><code>raise IndexError('test error')</code> 처럼 raise 로 에러 발생 가능</li><li>기본에러는 exception hierarchy 참조</li></ul></li></ul><h2 id="package"><a class="markdownIt-Anchor" href="#package"></a> Package</h2><ul><li><code>__init__.py</code> 가 있어야한다.</li><li><s>import package.utils</s> 또는 <code>from package import utils</code> 해서 <code>utils.func</code> 롤 호출</li><li><code>from package import utils as NamedUtil</code> 처럼 as 문으로 네임스페이스 변경 가능</li><li><strong>비추천</strong> <code>from package.folder import *</code> 로 folder 레벨의 모든 python import 가 가능한데<br><code>folder.__init__.py</code> 에 <code>__all__ = ['py', 'py2']</code> 처럼 선언해줘야한다.</li><li><a href="http://setup.py" target="_blank" rel="external nofollow noopener noreferrer">setup.py</a> 를 만들어 패키지를 배포시킬 수 있다.<ul><li>PyCharm: Tools &gt; Create <a href="http://setup.py" target="_blank" rel="external nofollow noopener noreferrer">setup.py</a> &gt; run <a href="http://setup.py" target="_blank" rel="external nofollow noopener noreferrer">setup.py</a> &gt; sdist 로 출력</li><li>Cli: <code>python setup.py sdist</code></li></ul></li><li>PyPI 에 서드파티 라이브러리를 등록하면 <code>pip install termcolor</code> 처럼 설치 가능</li><li>import 라이브러리 순서는 위에서부터 <strong>표준, pip, 로컬패키지, 로컬파일</strong></li><li><code>if __name__ == '__main__': main()</code> 은 <strong>entrypoint 스크립트</strong>에서 사용되는 패턴이다.</li></ul><h2 id="class"><a class="markdownIt-Anchor" href="#class"></a> Class</h2><ul><li>생성자 <code>__init__(self):</code>, <code>Instance()</code> 로 new 없이 생성</li><li>소멸자 <code>__del__(self):</code>, <code>del instance</code> 로 삭제</li><li>class method 의 첫 인자로는 self를 받아야 this처럼 사용이 가능하다. 두 번째 부터 파라미터를 받을 수 있다.</li></ul><h3 id="protected"><a class="markdownIt-Anchor" href="#protected"></a> protected</h3><ul><li>proteced 변수는 <code>_var</code> 처럼 underscore 하나를 넣는다.</li><li><code>@property</code>, <code>@property_name.setter</code> 데코레이터를 통해 <strong>getter/setter</strong> 처리가 가능하다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instance</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._foo</span><br><span class="line"></span><br><span class="line"><span class="meta">    @foo.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self, bar)</span>:</span></span><br><span class="line">        self._foo = bar</span><br><span class="line"></span><br><span class="line">intance = Instance()</span><br><span class="line">instance.foo = bar</span><br></pre></td></tr></table></figure><h3 id="private"><a class="markdownIt-Anchor" href="#private"></a> private</h3><ul><li>private 변수는 <code>self.__foo</code> 로 underscore 두 개를 넣는다.</li><li>인스턴스 밖에서 접근이 불가능하다.</li></ul><h3 id="class-variable"><a class="markdownIt-Anchor" href="#class-variable"></a> class variable</h3><ul><li>클래스 변수는 모든 오브젝트 초기화시에 공유되므로 list, dict… 등을 사용하지 않아야한다.</li><li>상수처럼 쓰는게 좋을 듯</li></ul><h3 id="class-method"><a class="markdownIt-Anchor" href="#class-method"></a> class method</h3><ul><li>class 메소드는 <code>@classmethod</code> 데코레이터로 가능하다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instance</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="comment"># cls 로 클래스 접근가능</span></span><br><span class="line">        <span class="keyword">return</span> cls.bar</span><br><span class="line"></span><br><span class="line">Instance.foo()</span><br></pre></td></tr></table></figure><h3 id="static-method"><a class="markdownIt-Anchor" href="#static-method"></a> static method</h3><ul><li>static 메소드는 <code>@staticmethod</code> 데코레이터로 정의할 수 있으나 잘 사용되지는 않는다.</li></ul><h3 id="상속"><a class="markdownIt-Anchor" href="#상속"></a> 상속</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Parent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__</span><br></pre></td></tr></table></figure><ul><li>다중상속 하지말자</li><li><code>class Twins(Parent, Parent2)</code> 로 되지만 메소드명이 같을 경우 왼쪽에 선언된 것만 실행된다.</li></ul><h3 id="추상"><a class="markdownIt-Anchor" href="#추상"></a> 추상</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(metaclass=abc.ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Parent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'foo'</span>)</span><br></pre></td></tr></table></figure><h3 id="특수-메소드"><a class="markdownIt-Anchor" href="#특수-메소드"></a> 특수 메소드</h3><ul><li>많지만 <code>__str__</code> 이 제일 많이 쓴다. <code>toString()</code> 과 같다.</li><li><code>__len__</code> (len(instance))</li><li><code>__eq__</code> (instance == instance2)</li><li><code>__add__</code> (instance + instance2)</li><li>등등…</li><li>클래스 기본기능을 해치는 개인적인 느낌</li></ul><h1 id="여담"><a class="markdownIt-Anchor" href="#여담"></a> 여담</h1><ul><li>MSA의 시대에 살고 있는 어플리케이션 레이어의 개발자는 어쩔 수 없이 폴리글랏 프로그래머가 되기 마련이다.</li><li>하나의 언어에 능통하면 다른 언어로 넘어가는 데에는 익숙함의 문제지만,<br>그 언어를 제대로 사용하기 위해 가장 중요한 건 스타일 가이드, 린팅과 주기적인 Docs, Release Notes 확인이라고 생각한다.</li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/12/15/Pythonic-the-basics/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Carbon 으로 timestamp 파싱하기</title>
      <link>https://gracefullight.dev/2019/12/13/carbon-parse-timestamp/</link>
      <guid>https://gracefullight.dev/2019/12/13/carbon-parse-timestamp/</guid>
      <pubDate>Fri, 13 Dec 2019 15:05:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;timestamp&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#timestamp&quot;&gt;&lt;/a&gt; Timestamp&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Carbon&lt;/code&gt;으로 타임스탬프를 파싱하는 데에는 &lt;code&gt;createFr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="timestamp"><a class="markdownIt-Anchor" href="#timestamp"></a> Timestamp</h1><p><code>Carbon</code>으로 타임스탬프를 파싱하는 데에는 <code>createFromTimestamp</code> 메소드가 있다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Carbon::createFromTimestamp(<span class="number">1576249805</span>)-&gt;format();</span><br></pre></td></tr></table></figure><p>하지만 더 쉽게 <code>parse</code> 메소드를 사용해 파싱할 수도 있다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$timestamp = <span class="number">1576249805</span>;</span><br><span class="line">Carbon::parse(<span class="string">'@'</span> . $timestamp)-&gt;format();</span><br></pre></td></tr></table></figure><p>여기서의 <code>@</code>는 오류를 무시하는 기분이 들어서 찾아보았는데 표준이였다.</p><p><strong>Example #2 DateTime::setTimestamp() alternative in PHP 5.2</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ts = <span class="number">1171502725</span>;</span><br><span class="line">$date = <span class="keyword">new</span> DateTime(<span class="string">"@$ts"</span>);</span><br><span class="line"><span class="keyword">echo</span> $date-&gt;format(<span class="string">'U = Y-m-d H:i:s'</span>) . <span class="string">"\n"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="참조"><a class="markdownIt-Anchor" href="#참조"></a> 참조</h1><ul><li>timestamp 는 UTC 기준이며 (1970년부터의 차이) timezone 을 정의할 수 없다.</li><li><a href="https://www.php.net/manual/en/datetime.settimestamp.php" target="_blank" rel="external nofollow noopener noreferrer">php man: datetime.settimestamp</a></li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/12/13/carbon-parse-timestamp/#disqus_thread</comments>
    </item>
    
    <item>
      <title>타입스크립트에서 json import 방법</title>
      <link>https://gracefullight.dev/2019/11/26/import-json-with-typescript-ts5071/</link>
      <guid>https://gracefullight.dev/2019/11/26/import-json-with-typescript-ts5071/</guid>
      <pubDate>Tue, 26 Nov 2019 12:39:39 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;ts5071&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ts5071&quot;&gt;&lt;/a&gt; TS5071&lt;/h1&gt;&lt;p&gt;node 에서 즐겨쓰는 &lt;code&gt;package.json&lt;/code&gt; import 방법은 아래와 같다.&lt;/p&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="ts5071"><a class="markdownIt-Anchor" href="#ts5071"></a> TS5071</h1><p>node 에서 즐겨쓰는 <code>package.json</code> import 방법은 아래와 같다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> packageJson <span class="keyword">from</span> <span class="string">'../package.json'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(packageJson.version);</span><br></pre></td></tr></table></figure><p>편안하게 잘 사용되는 로직인데 타입스크립트로 변경시에는 몇 가지 설정을 해줘야한다.<br>설명에 필요없는 설정은 생략했다.</p><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="attr">"resolveJsonModule"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"esModuleInterop"</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또는 <code>tsc</code> 실행시에 <code>--esModuleInterop</code>, <code>--resolveJsonModule</code> 옵션을 추가해 빌드해줘야한다.</p><h1 id="참조"><a class="markdownIt-Anchor" href="#참조"></a> 참조</h1><ul><li><a href="https://github.com/microsoft/TypeScript/issues/26224" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/microsoft/TypeScript/issues/26224</a></li><li><a href="https://github.com/microsoft/TypeScript/pull/26825/files" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/microsoft/TypeScript/pull/26825/files</a></li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/11/26/import-json-with-typescript-ts5071/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vee-validate3 모든 규칙 추가시 TS7053 오류</title>
      <link>https://gracefullight.dev/2019/11/26/Vee-validate-installing-all-rules-ts7053/</link>
      <guid>https://gracefullight.dev/2019/11/26/Vee-validate-installing-all-rules-ts7053/</guid>
      <pubDate>Tue, 26 Nov 2019 11:29:46 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;ts7053&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ts7053&quot;&gt;&lt;/a&gt; TS7053&lt;/h1&gt;&lt;p&gt;3.0 버전이 되면서 &lt;code&gt;HOC&lt;/code&gt; 기반으로 변경되며 &lt;code&gt;rules&lt;/code&gt;를 상위
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="ts7053"><a class="markdownIt-Anchor" href="#ts7053"></a> TS7053</h1><p>3.0 버전이 되면서 <code>HOC</code> 기반으로 변경되며 <code>rules</code>를 상위 컴포넌트에서 확장하게 되었다.<br>문제는 <code>typescript</code> 기반에서 룰 전체 등록이 <strong>TS(7053)</strong> 에러를 발생시킨다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ValidationProvider, ValidationObserver, extend &#125; <span class="keyword">from</span> <span class="string">"vee-validate"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> rules <span class="keyword">from</span> <span class="string">"vee-validate/dist/rules"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(rules).forEach(<span class="function"><span class="params">rule</span> =&gt;</span> &#123;</span><br><span class="line">  extend(rule, rules[rule]); <span class="comment">// rules[rule] 에서 타입오류 발생</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Element implicitly has an &#39;any&#39; type because expression of type &#39;string&#39; can&#39;t be used to index type &#39;typeof import(&quot;...&#x2F;node_modules&#x2F;vee-validate&#x2F;dist&#x2F;rules&quot;)&#39;.</span><br><span class="line">No index signature with a parameter of type &#39;string&#39; was found on type &#39;typeof import(&quot;...&#x2F;node_modules&#x2F;vee-validate&#x2F;dist&#x2F;rules&quot;)&#39;.ts(7053)</span><br></pre></td></tr></table></figure><h1 id="원인"><a class="markdownIt-Anchor" href="#원인"></a> 원인</h1><p>import, export 의 모듈명은 string index 로 쳐지지 않아 발생한다.</p><h1 id="해결방법"><a class="markdownIt-Anchor" href="#해결방법"></a> 해결방법</h1><p><code>Object.entries</code>와 <code>for of</code>를 사용해 타입에 안전하게 돌려주면 된다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; extend &#125; <span class="keyword">from</span> <span class="string">"vee-validate"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> rules <span class="keyword">from</span> <span class="string">"vee-validate/dist/rules"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [rule, validation] of <span class="built_in">Object</span>.entries(rules)) &#123;</span><br><span class="line">  extend(rule, &#123;</span><br><span class="line">    ...validation</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="여담"><a class="markdownIt-Anchor" href="#여담"></a> 여담</h1><ul><li>새로운 구문 (async/await, import/export)를 사용해 돌릴 땐 먼저 <code>for of</code>를 사용하는 습관을 들여야겠다.</li><li>머지되어서 다음 사람의 삽질은 없을 듯 하다.</li></ul><h1 id="참조"><a class="markdownIt-Anchor" href="#참조"></a> 참조</h1><ul><li><strong>Merged</strong> <a href="https://github.com/logaretm/vee-validate/pull/2511" target="_blank" rel="external nofollow noopener noreferrer">docs: added Installing All Rules with typescript</a></li><li><a href="https://logaretm.github.io/vee-validate/guide/rules.html#installing-all-rules" target="_blank" rel="external nofollow noopener noreferrer">vee-validate#installing-all-rules</a></li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/11/26/Vee-validate-installing-all-rules-ts7053/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Helm chart의 모든 것</title>
      <link>https://gracefullight.dev/2019/10/27/Helm-chart%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83/</link>
      <guid>https://gracefullight.dev/2019/10/27/Helm-chart%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83/</guid>
      <pubDate>Sun, 27 Oct 2019 08:10:13 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;helm&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#helm&quot;&gt;&lt;/a&gt; Helm&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;Helm is a tool for manaing Kubernetes charts.&lt;br&gt;Charts
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="helm"><a class="markdownIt-Anchor" href="#helm"></a> Helm</h1><blockquote><p>Helm is a tool for manaing Kubernetes charts.<br>Charts are packages of pre-configured Kubernetes resources.</p></blockquote><ul><li>헬름은 쿠버네티스 차트를 관리하기 위한 도구</li><li>차트는 사전 구성된 쿠버네티스 리소스의 패키지</li><li>같은 어플레케이션을 여러 환경에 배포시 환경 변수, 도메인 등의 manifest 파일을 차트를 통해 관리</li><li>차트를 중심으로 하는 쿠버네티스 개발 종합 관리 도구</li></ul><h1 id="설치"><a class="markdownIt-Anchor" href="#설치"></a> 설치</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 설치</span></span><br><span class="line">brew install kubernetes-helm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 초기화</span></span><br><span class="line">helm init</span><br><span class="line"></span><br><span class="line"><span class="comment"># tiller 파드 확인</span></span><br><span class="line">kubectl -n kube-system get service,deployment,pod --selector app=helm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 버전 확인</span></span><br><span class="line">helm version</span><br></pre></td></tr></table></figure><h1 id="구성"><a class="markdownIt-Anchor" href="#구성"></a> 구성</h1><ul><li>cli와 쿠버네티스 클러스터에 설치되는 서버인 tiller(틸러)로 구성</li></ul><h2 id="chart"><a class="markdownIt-Anchor" href="#chart"></a> chart</h2><ul><li>쿠버네티스는 service, deployment, ingress 등 리소스를 생성하고 manifest 파일을 적용하는 방식으로 어플리케이션을 배포한다. 이 manifest 파일을 생성하는 템플릿을 여러 개 패키징한 것</li><li>helm repository 에 tgz 파일로 저장</li></ul><h3 id="chart-구성"><a class="markdownIt-Anchor" href="#chart-구성"></a> chart 구성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chart-example</span><br><span class="line">├── charts <span class="comment"># 차트가 의존하는 차트 디렉토리</span></span><br><span class="line">├── templates <span class="comment"># manifest 파일 템플릿 디렉토리</span></span><br><span class="line">│   ├── NOTES.txt <span class="comment"># 차트 사용법 등 참조 문서 템플릿</span></span><br><span class="line">│   ├── _helper.tpl <span class="comment"># manifest 렌더링에 사용되는 템플릿 헬퍼</span></span><br><span class="line">│   └── example.yaml <span class="comment"># 각종 K8S 리소스의 manifest 템플릿</span></span><br><span class="line">├── Chart.yaml <span class="comment"># 차트 정보가 정의 파일</span></span><br><span class="line">└── values.yaml <span class="comment"># 차트 기본값 value 파일</span></span><br></pre></td></tr></table></figure><p>차트 설치시 <code>values.yaml</code> 에 override 할 값을 정의한 <code>yaml</code> 파일을 만들면 된다.</p><h2 id="repository"><a class="markdownIt-Anchor" href="#repository"></a> repository</h2><ul><li>local: 헬름 클라이언트가 설치된 로컬 리포, 로컬에서 생성한 패키지가 존재</li><li>stable: stable charts repo, 기본값이며 <a href="https://github.com/helm/charts/tree/master/stable" target="_blank" rel="external nofollow noopener noreferrer">helm/charts</a> 차트 사용 가능</li><li>incubator: stable 조건 미달 repo<ul><li><code>helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com/</code></li></ul></li><li><code>helm search</code> 로 차트 검색 가능</li></ul><h1 id="명령어"><a class="markdownIt-Anchor" href="#명령어"></a> 명령어</h1><h2 id="init"><a class="markdownIt-Anchor" href="#init"></a> init</h2><p>보통은 <code>helm init</code><br>실서버에서는 <code>helm init --service-account tiller --node-selectors system --history-max 10</code><br>업그레이드는 <code>helm init --upgrade</code></p><ul><li>–service-account: 틸러가 사용할 서비스계정</li><li>–node-selectors: 틸러를 배포할 노드 레이블</li><li>–upgrade: 틸러 업그레이드</li><li>–history-max: 리소스 하나당 유지할 최대 히스토리 수</li></ul><h2 id="create"><a class="markdownIt-Anchor" href="#create"></a> create</h2><p><code>helm create 차트명</code></p><h2 id="package"><a class="markdownIt-Anchor" href="#package"></a> package</h2><p><code>helm package 차트명</code><br>차트를 압축파일로 패키징</p><ul><li>–version: 차트 버전 지정<ul><li>없을 경우 차트의 버전을 따른다.</li></ul></li></ul><h2 id="search"><a class="markdownIt-Anchor" href="#search"></a> search</h2><p><code>helm search 검색어</code></p><ul><li>-r, --regexp: 검색어를 정규표현식으로 사용</li><li>-l, --versions: 버전 목록도 출력</li></ul><h2 id="fetch"><a class="markdownIt-Anchor" href="#fetch"></a> fetch</h2><p><code>helm fetch 차트경로</code></p><ul><li>–version: 특정 버전 지정</li></ul><h2 id="serve"><a class="markdownIt-Anchor" href="#serve"></a> serve</h2><p><code>helm serve</code><br>로컬 레포지토리로 사용할 웹 서버 시작</p><ul><li>–address: 서버가 개방할 주소<ul><li>기본값은 127.0.0.1:8879</li></ul></li><li>–repo-path: 차트 레포지토리가 될 로컬 디렉토리</li></ul><h2 id="install"><a class="markdownIt-Anchor" href="#install"></a> install</h2><p><code>helm install 차트명</code><br>차트로 애플리케이션 설치</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">helm install stable/redis --name my-redis</span><br><span class="line"></span><br><span class="line">helm install stable/redis --version 3.6.0 \</span><br><span class="line">  --name my-redis \</span><br><span class="line">  --namespace gracefullight \</span><br><span class="line">  -f ./my-redis.yaml</span><br></pre></td></tr></table></figure><ul><li>–dry-run</li><li>–name: 릴리즈명</li><li>–namespace: 설치 대상 네임스페이스</li><li>-f, --values: yaml 파일 경로 (다수 가능)</li><li>–version: 차트 버전 지정</li></ul><h2 id="list"><a class="markdownIt-Anchor" href="#list"></a> list</h2><p><code>helm list</code><br><code>helm list --namespace kube-system</code></p><ul><li>–deleted: 삭제된 릴리즈 포함</li><li>–namespace: 해당 네임스페이스만 확인</li></ul><h2 id="get"><a class="markdownIt-Anchor" href="#get"></a> get</h2><p><code>helm get 릴리즈명</code><br>설치된 릴리스 상ㅇ세 정보를 yaml 으로 출력</p><ul><li>–revision: 릴리즈 리비전 확인</li></ul><h2 id="delete"><a class="markdownIt-Anchor" href="#delete"></a> delete</h2><p><code>helm delete 릴리즈명</code></p><ul><li>–purge: 릴리즈 삭제하고 릴리즈명 해제</li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/10/27/Helm-chart%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83/#disqus_thread</comments>
    </item>
    
    <item>
      <title>쿠버네티스 오브젝트와 클래스 오브젝트 비교</title>
      <link>https://gracefullight.dev/2019/10/25/k8s-object-vs-class-object/</link>
      <guid>https://gracefullight.dev/2019/10/25/k8s-object-vs-class-object/</guid>
      <pubDate>Fri, 25 Oct 2019 06:49:57 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;앞서&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#앞서&quot;&gt;&lt;/a&gt; 앞서&lt;/h1&gt;&lt;p&gt;쿠버네티스를 이해하는 건 어렵다. DevOps 의 전반적인 플로우를 알아야 이 플로우도 이해가 가기 때문이라 생각한다.&lt;br&gt;생소한
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="앞서"><a class="markdownIt-Anchor" href="#앞서"></a> 앞서</h1><p>쿠버네티스를 이해하는 건 어렵다. DevOps 의 전반적인 플로우를 알아야 이 플로우도 이해가 가기 때문이라 생각한다.<br>생소한 용어들도 어렵다. <a href="/2019/06/09/kubernetes%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83/">한 판을 정리</a> 했지만 매번 참조해야되는 듯하다.</p><h1 id="오브젝트-비교"><a class="markdownIt-Anchor" href="#오브젝트-비교"></a> 오브젝트 비교</h1><table><thead><tr><th>개념</th><th>JAVA 클래스</th><th>쿠버네티스 오브젝트</th></tr></thead><tbody><tr><td>캡슐화</td><td>Class</td><td>Container image</td></tr><tr><td>인스턴스</td><td>Object</td><td>Container</td></tr><tr><td>재사용단위</td><td>jar</td><td>Container image</td></tr><tr><td>컴포지션</td><td>Class A Contains Class B</td><td>Sidecar pattern</td></tr><tr><td>상속</td><td>Class A extends Class B</td><td>A container’s from parent image</td></tr><tr><td>배포단위</td><td>jar, war…</td><td>Pod</td></tr><tr><td>빌드 및 런타임 아이솔레이션</td><td>Module, Package, Class</td><td>Namespace, Pod, Container</td></tr><tr><td>초기화</td><td>Consturctor</td><td>Init container</td></tr><tr><td>초기화 후 트리거</td><td>Init method</td><td>postStart</td></tr><tr><td>종료 전 트리거</td><td>Destroy</td><td>preStop</td></tr><tr><td>Cleanup</td><td>finalize(), shutdown hook</td><td><a href="https://github.com/kubernetes/community/pull/483" target="_blank" rel="external nofollow noopener noreferrer">Defer container</a></td></tr><tr><td>비동기, 병렬 실행</td><td>ThreadPoolExecutor, ForkJoinPool</td><td>Job</td></tr><tr><td>스케쥴링</td><td>Timer, ScheduledExecutorService</td><td>CronJob</td></tr><tr><td>백그라운드</td><td>Daemon thread</td><td>DaemonSet</td></tr><tr><td>설정관리</td><td>System.getenv(), Properties</td><td>ConfigMap, Secret</td></tr></tbody></table><h1 id="여담"><a class="markdownIt-Anchor" href="#여담"></a> 여담</h1><ul><li>개념 설정 전에 이 표를 알았더라면 훨씬 이해가 쉬웠을텐데</li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/10/25/k8s-object-vs-class-object/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Github Actions로 Hexo 배포 자동화하기</title>
      <link>https://gracefullight.dev/2019/08/20/Deploy-Hexo-with-github-actions/</link>
      <guid>https://gracefullight.dev/2019/08/20/Deploy-Hexo-with-github-actions/</guid>
      <pubDate>Tue, 20 Aug 2019 14:25:15 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#개념&quot;&gt;&lt;/a&gt; 개념&lt;/h1&gt;&lt;p&gt;Docker 이미지로 생성된 후에 그 위에서 돌아간다.&lt;br&gt;자세한 개념은 시간날 때 추가 예정&lt;/p&gt;&lt;h1 id=&quot;레파지토리-토큰
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="개념"><a class="markdownIt-Anchor" href="#개념"></a> 개념</h1><p>Docker 이미지로 생성된 후에 그 위에서 돌아간다.<br>자세한 개념은 시간날 때 추가 예정</p><h1 id="레파지토리-토큰-발급"><a class="markdownIt-Anchor" href="#레파지토리-토큰-발급"></a> 레파지토리 토큰 발급</h1><p><a href="https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line" target="_blank" rel="external nofollow noopener noreferrer">여기</a>를 참조해 레파지토리의 secret 으로 등록한다.</p><h1 id="서브모듈"><a class="markdownIt-Anchor" href="#서브모듈"></a> 서브모듈</h1><p>themes directory 하위의 테마들은 각각의 repo를 가지고 있다.<br>이 테마들을 CI 중에 가져오기 위해선 서브모듈로 등록해주고 초기화시켜줘야한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 서브모듈 테마 추가</span></span><br><span class="line">git submodule add 테마깃경로 themes/테마명</span><br><span class="line"></span><br><span class="line"><span class="comment"># 싱크</span></span><br><span class="line">git submodule update --init --remote</span><br></pre></td></tr></table></figure><p>여기서 <code>remote</code> 옵션을 쓰지 않을 경우 최신 마스터를 pull 하지 않는다. 서브모듈을 쓰는 이유는 내가 관리하지 않기 위함이니 꼭 추가해주자.</p><h1 id="소스"><a class="markdownIt-Anchor" href="#소스"></a> 소스</h1><p>주석 없어도 하나하나가 무슨 느낌인지는 받아들여질 것 같다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Node</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node:</span> <span class="string">[12]</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SETUP_NODE_$&#123;&#123;</span> <span class="string">matrix.node</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">BEFORE_INSTALL</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">i</span> <span class="string">-g</span> <span class="string">hexo</span> <span class="string">workbox-cli</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">BEFORE_SCRIPT</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">'gracefullight'</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">'eks012@gmail.com'</span></span><br><span class="line">        <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/__GITHUB_TOKEN__/$<span class="template-variable">&#123;&#123; secrets.HEXO_DEPLOY_TOKEN &#125;&#125;</span>/"</span> <span class="string">_config.yml</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">THEME_INSTALL</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">git</span> <span class="string">submodule</span> <span class="string">update</span> <span class="string">--init</span> <span class="string">--remote</span> <span class="string">--recursive</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NPM_INSTALL</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">HEXO_CLEAN</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">HEXO_GENERATE</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">WORKBOX_BUILD</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">workbox</span> <span class="string">injectManifest</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">HEXO_DEPLOY</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><h2 id="github_token"><a class="markdownIt-Anchor" href="#github_token"></a> GITHUB_TOKEN</h2><p><code>secrets.GITHUB_TOKEN</code> 은 예약된 토큰이다.<br>빌드 이미지에서 현재 repo를 접근하기 위한 토큰임을 알아두자.</p><h1 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h1><blockquote><p>travis-ci 안녕</p></blockquote><h1 id="참조"><a class="markdownIt-Anchor" href="#참조"></a> 참조</h1><ul><li><a href="https://help.github.com/en/articles/workflow-syntax-for-github-actions" target="_blank" rel="external nofollow noopener noreferrer">Workflow syntax</a></li><li><a href="https://help.github.com/en/articles/virtual-environments-for-github-actions" target="_blank" rel="external nofollow noopener noreferrer">Virtual env</a></li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/08/20/Deploy-Hexo-with-github-actions/#disqus_thread</comments>
    </item>
    
    <item>
      <title>puppeteer 크롤링 속도 증가시키기</title>
      <link>https://gracefullight.dev/2019/07/29/increase-puppeteer-crawling-speed/</link>
      <guid>https://gracefullight.dev/2019/07/29/increase-puppeteer-crawling-speed/</guid>
      <pubDate>Mon, 29 Jul 2019 12:44:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;페이지를 가져온 뒤 css, image, font를 차단하면 더 빠른 DOM 액세스가 가능하다.&lt;/p&gt;&lt;h1 id=&quot;리소스-차단&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#리소스-차단&quot;&gt;&lt;/a&gt; 리소스 차단&lt;/h1&gt;&lt;fig
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>페이지를 가져온 뒤 css, image, font를 차단하면 더 빠른 DOM 액세스가 가능하다.</p><h1 id="리소스-차단"><a class="markdownIt-Anchor" href="#리소스-차단"></a> 리소스 차단</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @types/puppeteer</span></span><br><span class="line"><span class="keyword">import</span> &#123; launch, Browser, Request, Page &#125; <span class="keyword">from</span> <span class="string">'puppeteer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> browser: Browser = <span class="keyword">await</span> launch(&#123;</span><br><span class="line">  headless: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> page: Page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line"><span class="keyword">await</span> page.setRequestInterception(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">page.on(<span class="string">'request'</span>, <span class="function">(<span class="params">req: Request</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (req.resourceType()) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'stylesheet'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'font'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'image'</span>:</span><br><span class="line">      req.abort();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      req.continue();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> page.goto(<span class="string">'URL'</span>);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/07/29/increase-puppeteer-crawling-speed/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Chrome 75 Webview에서 서비스워커의 fetch request 가 실패하는 문제</title>
      <link>https://gracefullight.dev/2019/06/30/network-request-failed-in-serviceworker-on-chrome-75-webview/</link>
      <guid>https://gracefullight.dev/2019/06/30/network-request-failed-in-serviceworker-on-chrome-75-webview/</guid>
      <pubDate>Sun, 30 Jun 2019 04:50:12 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;발단&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#발단&quot;&gt;&lt;/a&gt; 발단&lt;/h1&gt;&lt;p&gt;서비스워커는 n:m (사이트:디바이스)로 모든 클라이언트 기기에 설치된다.&lt;br&gt;배포 후 아무 문제 없이 동작하였으나, 190604
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="발단"><a class="markdownIt-Anchor" href="#발단"></a> 발단</h1><p>서비스워커는 n:m (사이트:디바이스)로 모든 클라이언트 기기에 설치된다.<br>배포 후 아무 문제 없이 동작하였으나, 190604 이후 웹뷰에서 <code>net::ERR_ABORTED</code> 페이지가 보인다는 버그가 들어오기 시작했다.<br>랜덤하게 발생되고 있어 추적이 어려웠으나 4일에 Chrome의 메이저 버전이 업데이트 되었다라는 것을 확인했고 디버깅을 시작했다.</p><h1 id="디버깅"><a class="markdownIt-Anchor" href="#디버깅"></a> 디버깅</h1><p>서비스워커가 내려오지 않은 경우 페이지가 100% 정상동작을 하였다.<br>서비스워커가 내려온 경우 랜덤하게 페이지가 로드되지 않았다.</p><p>문제는 서비스워커로 확인되었고, 세부적인 디버깅 내역은 다음과 같다.</p><ul><li>fetchListener 내부 cacheStorage 접근 예외처리: 재현</li><li>fetchListener 제거: 재현 안됨</li></ul><p>Chrome 75버전의 웹뷰에서 서비스워커의 fetching 방식이 변경되었다는 걸 확인할 수 있었다.<br>74, 75버전의 Diff를 찾을 수 있어 서비스워커 코어가 어마어마하게 변경되었다는 걸 확인할 수 있었으나 <em>이 코드를 디버깅하는 것보다 퇴사 후 행복하게 사는 게 멋질 것</em>이란 판단이 들었다.<br>다행히 구글러와 연락이 닿아 private 버그리포팅을 했고, Chrome은 오픈소스라 구글에서도 일일히 확인하기 힘들다라는 답변을 들을 수 있었다.</p><h1 id="웹뷰와-서비스워커"><a class="markdownIt-Anchor" href="#웹뷰와-서비스워커"></a> 웹뷰와 서비스워커</h1><p>웹뷰의 서비스워커와 브라우저의 서비스워커는 다른 인스턴스이므로 서로 공유되지 않는다.<br>그렇다면 웹뷰에서 재접속시에 앱 셸을 빠르게 로드하는 이점 뿐이라는 말이다. <code>=== 어드벤티지 없음</code></p><p><a href="https://developer.chrome.com/multidevice/user-agent" target="_blank" rel="external nofollow noopener noreferrer">WebView UA in Lollipop and Above</a>에 따르면 안드로이드 롤리팝 이후부터 User Agent에 wv란 값을 물고 들어온다.</p><h1 id="해결"><a class="markdownIt-Anchor" href="#해결"></a> 해결</h1><h2 id="예외처리"><a class="markdownIt-Anchor" href="#예외처리"></a> 예외처리</h2><p>Chrome 엔진이 업데이트 된다고 서비스워커가 제거되지 않는다.<br>따라서 <strong>UA 에 android, wv 값이 있는 경우 서비스워커를 설치하지 않을 뿐 아니라 설치된 서비스워커를 제거해주는 로직</strong>이 있어야한다.<br>아니라면 <a href="https://github.com/w3c/ServiceWorker/issues/614" target="_blank" rel="external nofollow noopener noreferrer">A way to immediately unregister a service worker</a> 기능을 브라우저 벤더들이 개발해줘야한다.</p><p>더 특정한 버전을 줘서 예외처리를 한다면 다음과 같을 것이다.</p><blockquote><p>Chrome 75.0.3770.67 ~ 75.0.3770.101 버전의 모든 안드로이드 웹뷰에서 서비스워커 설치를 차단, 이미 설치가 되어있다면 삭제</p></blockquote><h2 id="패치"><a class="markdownIt-Anchor" href="#패치"></a> 패치</h2><p>몇일 뒤에 다른 업체에서 public 하게 <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=977784" target="_blank" rel="external nofollow noopener noreferrer">버그리포팅</a>을 올렸고 버그를 찾아서 조만간 패치될 예정이다.</p><p><code>This is affecting tens of thousands of our readers</code> 로 보아 나와 같은 빡침이 느껴져서 아련했다.</p><p>패치된 코드는 <a href="https://chromium-review.googlesource.com/c/chromium/src/+/1675358" target="_blank" rel="external nofollow noopener noreferrer">여기</a>서 볼 수 있다.</p><h1 id="여담"><a class="markdownIt-Anchor" href="#여담"></a> 여담</h1><ul><li>브라우저에 버그 발생시 대처하는 방법은 거의 불가능하다.</li><li>실수는 여기든 저기든 다 똑같구나</li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/06/30/network-request-failed-in-serviceworker-on-chrome-75-webview/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
